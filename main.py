import os
import logging
import threading
import time
import sqlite3
import json
import aiohttp
import asyncio
import signal
import atexit
import socket
import sys
import re
from datetime import datetime, timedelta
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
ADMIN_USER_ID = 362423055  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_USERNAME = "@ppsupershef"  # Username –∫–∞–Ω–∞–ª–∞

# Yandex GPT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# ==================== –°–ò–°–¢–ï–ú–ê –û–î–ù–û–≠–ö–ó–ï–ú–ü–õ–Ø–†–ù–û–°–¢–ò ====================

class SingleInstance:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self, port=18888):
        self.port = port
        self.socket = None
        
    def __enter__(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ø–æ—Ä—Ç - –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind(('127.0.0.1', self.port))
            self.socket.listen(1)
            logger.info(f"üîí Single instance lock acquired on port {self.port}")
            return True
        except socket.error as e:
            logger.error(f"‚ùå Another instance is already running: {e}")
            return False
            
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if self.socket:
            try:
                self.socket.close()
                logger.info("üîì Single instance lock released")
            except:
                pass

def check_single_instance():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    with SingleInstance() as is_first:
        if not is_first:
            logger.error("üö´ Bot is already running elsewhere. Exiting.")
            sys.exit(1)
        return True

# ==================== GRACEFUL SHUTDOWN ====================

class GracefulShutdown:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    def __init__(self):
        self.shutdown_requested = False
        self.application = None
        
    def setup_signal_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.application = application
        
        def signal_handler(signum, frame):
            logger.info(f"üõë Received signal {signum}, initiating graceful shutdown...")
            self.shutdown_requested = True
            self.shutdown()
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        atexit.register(self.cleanup)
        
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application and not self.shutdown_requested:
            logger.info("‚è≥ Stopping bot application...")
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
                if hasattr(self.application, 'updater') and self.application.updater.running:
                    self.application.updater.stop()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application
                self.application.stop()
                self.application.shutdown()
                
                logger.info("‚úÖ Bot stopped gracefully")
            except Exception as e:
                logger.error(f"Error during shutdown: {e}")
            finally:
                self.shutdown_requested = True
                
    def cleanup(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        logger.info("üßπ Performing final cleanup...")
        
    def should_stop(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        return self.shutdown_requested

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è graceful shutdown
shutdown_manager = GracefulShutdown()

# Flask app –¥–ª—è health checks
app = Flask(__name__)

@app.route('/')
def home():
    return """
    <h1>ü§ñ Nutrition Bot is Running!</h1>
    <p>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
    <p><a href="/health">Health Check</a></p>
    <p>üïí Last update: {}</p>
    """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

@app.route('/health')
def health_check():
    return {
        "status": "healthy", 
        "service": "nutrition-bot",
        "timestamp": datetime.now().isoformat(),
        "version": "6.0"
    }

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS nutrition_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_checkins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            weight REAL,
            waist_circumference INTEGER,
            wellbeing_score INTEGER,
            sleep_quality INTEGER,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_limits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            last_plan_date TIMESTAMP,
            plan_count INTEGER DEFAULT 0,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS shopping_lists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_id INTEGER NOT NULL,
            items TEXT,
            checked_items TEXT DEFAULT '[]',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['user_id'], user_data['username'], user_data['first_name'], user_data['last_name']))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving user: {e}")
    finally:
        conn.close()

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_USER_ID

def can_make_request(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞"""
    try:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω—ã
        if is_admin(user_id):
            return True
            
        conn = sqlite3.connect('nutrition_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return True
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_since_last_plan = (datetime.now() - last_plan_date).days
        
        can_request = days_since_last_plan >= 7
        conn.close()
        return can_request
        
    except Exception as e:
        logger.error(f"Error checking request limit: {e}")
        return True

def update_user_limit(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return
            
        conn = sqlite3.connect('nutrition_bot.db')
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        cursor.execute('''
            INSERT OR REPLACE INTO user_limits (user_id, last_plan_date, plan_count, updated_at)
            VALUES (?, ?, COALESCE((SELECT plan_count FROM user_limits WHERE user_id = ?), 0) + 1, ?)
        ''', (user_id, current_time, user_id, current_time))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error updating user limits: {e}")

def get_days_until_next_plan(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return 0
            
        conn = sqlite3.connect('nutrition_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return 0
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_passed = (datetime.now() - last_plan_date).days
        days_remaining = 7 - days_passed
        
        conn.close()
        return max(0, days_remaining)
        
    except Exception as e:
        logger.error(f"Error getting days until next plan: {e}")
        return 0

def save_plan(user_id, plan_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO nutrition_plans (user_id, plan_data) VALUES (?, ?)', 
                      (user_id, json.dumps(plan_data)))
        plan_id = cursor.lastrowid
        conn.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        save_shopping_list(user_id, plan_id, plan_data.get('shopping_list', ''))
        
        return plan_id
    except Exception as e:
        logger.error(f"Error saving plan: {e}")
        return None
    finally:
        conn.close()

def save_shopping_list(user_id, plan_id, shopping_list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO shopping_lists (user_id, plan_id, items)
            VALUES (?, ?, ?)
        ''', (user_id, plan_id, shopping_list))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving shopping list: {e}")
    finally:
        conn.close()

def get_shopping_list(user_id, plan_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT items, checked_items FROM shopping_lists WHERE user_id = ? AND plan_id = ?', 
                      (user_id, plan_id))
        result = cursor.fetchone()
        if result:
            return {
                'items': result[0],
                'checked_items': json.loads(result[1]) if result[1] else []
            }
        return None
    except Exception as e:
        logger.error(f"Error getting shopping list: {e}")
        return None
    finally:
        conn.close()

def update_checked_items(user_id, plan_id, checked_items):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            UPDATE shopping_lists 
            SET checked_items = ? 
            WHERE user_id = ? AND plan_id = ?
        ''', (json.dumps(checked_items), user_id, plan_id))
        conn.commit()
    except Exception as e:
        logger.error(f"Error updating checked items: {e}")
    finally:
        conn.close()

def save_checkin(user_id, weight, waist, wellbeing, sleep):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO daily_checkins (user_id, weight, waist_circumference, wellbeing_score, sleep_quality)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, weight, waist, wellbeing, sleep))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving checkin: {e}")
    finally:
        conn.close()

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT date, weight, waist_circumference, wellbeing_score, sleep_quality
            FROM daily_checkins WHERE user_id = ? ORDER BY date DESC LIMIT 7
        ''', (user_id,))
        checkins = cursor.fetchall()
        return checkins
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return []
    finally:
        conn.close()

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ï–† GPT ====================

class GPTParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Yandex GPT"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def parse_plan_response(self, gpt_response, user_data):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç GPT –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            self.logger.info("üîç Starting GPT response parsing...")
            
            structured_plan = {
                'days': [],
                'shopping_list': self._extract_shopping_list(gpt_response),
                'general_recommendations': self._extract_general_recommendations(gpt_response),
                'water_regime': self._extract_water_regime(gpt_response),
                'user_data': user_data,
                'parsed_at': datetime.now().isoformat()
            }
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–∏
            days_texts = self._split_into_days(gpt_response)
            
            for i, day_text in enumerate(days_texts):
                if day_text.strip():
                    day_data = self._parse_day(day_text, i)
                    if day_data:
                        structured_plan['days'].append(day_data)
            
            # –£–ë–ï–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            if not structured_plan['shopping_list'] or structured_plan['shopping_list'].strip() == self._generate_default_shopping_list():
                structured_plan['shopping_list'] = self._generate_shopping_list_from_meals(structured_plan['days'])
            
            self.logger.info(f"‚úÖ Successfully parsed {len(structured_plan['days'])} days")
            self.logger.info(f"üõí Shopping list synchronized: {len(structured_plan['shopping_list'].split(chr(10)))} items")
            return structured_plan
            
        except Exception as e:
            self.logger.error(f"‚ùå Error parsing GPT response: {e}")
            return self._create_fallback_plan(user_data)
    
    def _split_into_days(self, text):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        days_pattern = r'(?:–î–ï–ù–¨\s+\d+|–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö|–í–¢–û–†–ù–ò–ö|–°–†–ï–î–ê|–ß–ï–¢–í–ï–†–ì|–ü–Ø–¢–ù–ò–¶–ê|–°–£–ë–ë–û–¢–ê|–í–û–°–ö–†–ï–°–ï–ù–¨–ï).*?(?=(?:–î–ï–ù–¨\s+\d+|–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö|–í–¢–û–†–ù–ò–ö|–°–†–ï–î–ê|–ß–ï–¢–í–ï–†–ì|–ü–Ø–¢–ù–ò–¶–ê|–°–£–ë–ë–û–¢–ê|–í–û–°–ö–†–ï–°–ï–ù–¨–ï|$))'
        matches = re.findall(days_pattern, text, re.DOTALL | re.IGNORECASE)
        
        if matches:
            return matches
        else:
            return self._split_by_headers(text)
    
    def _split_by_headers(self, text):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        lines = text.split('\n')
        days = []
        current_day = []
        day_started = False
        
        for line in lines:
            if re.match(r'.*(–¥–µ–Ω—å|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).*', line.lower()):
                if day_started and current_day:
                    days.append('\n'.join(current_day))
                    current_day = []
                day_started = True
            
            if day_started:
                current_day.append(line)
        
        if current_day:
            days.append('\n'.join(current_day))
        
        return days if days else [text]
    
    def _parse_day(self, day_text, day_index):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è"""
        day_names = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        day_name = day_names[day_index] if day_index < len(day_names) else f"–î–ï–ù–¨ {day_index + 1}"
        
        return {
            'name': day_name,
            'meals': self._extract_meals(day_text),
            'schedule': self._extract_daily_schedule(day_text),
            'total_calories': self._calculate_day_calories(day_text)
        }
    
    def _extract_meals(self, day_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ –¥–µ–Ω—å"""
        meals = []
        meal_types = [
            ('–ó–ê–í–¢–†–ê–ö', 'üç≥'),
            ('–ü–ï–†–ï–ö–£–° 1', 'ü•ó'), 
            ('–û–ë–ï–î', 'üç≤'),
            ('–ü–ï–†–ï–ö–£–° 2', 'üçé'),
            ('–£–ñ–ò–ù', 'üçõ')
        ]
        
        for meal_type, emoji in meal_types:
            meal_data = self._extract_meal_data(day_text, meal_type, emoji)
            if meal_data:
                meals.append(meal_data)
        
        return meals
    
    def _extract_meal_data(self, day_text, meal_type, emoji):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        meal_pattern = f'{meal_type}.*?(?=\\n\\s*(?:{meal_type}|–ó–ê–í–¢–†–ê–ö|–û–ë–ï–î|–£–ñ–ò–ù|–ü–ï–†–ï–ö–£–°|–î–ï–ù–¨|$))'
        match = re.search(meal_pattern, day_text, re.DOTALL | re.IGNORECASE)
        
        if not match:
            return None
        
        meal_text = match.group(0)
        
        return {
            'type': meal_type,
            'emoji': emoji,
            'name': self._extract_meal_name(meal_text),
            'time': self._extract_meal_time(meal_text),
            'calories': self._extract_calories(meal_text),
            'ingredients': self._extract_ingredients(meal_text),
            'instructions': self._extract_instructions(meal_text),
            'cooking_time': self._extract_cooking_time(meal_text),
            'nutrition': self._extract_nutrition_info(meal_text)
        }
    
    def _extract_meal_name(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"""
        name_patterns = [
            r'\d{1,2}[:.]\d{2}[\s-]*(.*?)(?=\\n|$|–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã|–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ)',
            r'(?:–ó–∞–≤—Ç—Ä–∞–∫|–û–±–µ–¥|–£–∂–∏–Ω|–ü–µ—Ä–µ–∫—É—Å)[\s:]*(.*?)(?=\\n|$)',
            r'[A-Z–ê-–Ø][a-z–∞-—è]+\s+[A-Z–ê-–Øa-z–∞-—è\s]+(?=\\n)'
        ]
        
        for pattern in name_patterns:
            match = re.search(pattern, meal_text, re.DOTALL | re.IGNORECASE)
            if match:
                name = match.group(1) if match.lastindex else match.group(0)
                return self._clean_text(name.strip())
        
        return "–ë–ª—é–¥–æ –¥–Ω—è"
    
    def _extract_meal_time(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        time_pattern = r'(\d{1,2}[:.]\d{2})'
        match = re.search(time_pattern, meal_text)
        return match.group(1).replace('.', ':') if match else "8:00"
    
    def _extract_calories(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"""
        calorie_patterns = [
            r'(\d+)\s*–∫–∫–∞–ª',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:\s*(\d+)',
            r'–∫–∞–ª–æ—Ä–∏–∏:\s*(\d+)'
        ]
        
        for pattern in calorie_patterns:
            match = re.search(pattern, meal_text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} –∫–∫–∞–ª"
        
        return "~350 –∫–∫–∞–ª"
    
    def _extract_ingredients(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        ingredients_section = self._find_section(meal_text, ['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '—Å–æ—Å—Ç–∞–≤', '–ø—Ä–æ–¥—É–∫—Ç—ã'])
        
        if ingredients_section:
            lines = ingredients_section.split('\n')
            ingredients = []
            for line in lines:
                line = line.strip()
                if line and not re.match(r'^(–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã|—Å–æ—Å—Ç–∞–≤|–ø—Ä–æ–¥—É–∫—Ç—ã)', line.lower()):
                    clean_line = re.sub(r'^[‚Ä¢\-*\d\.]\s*', '', line)
                    if clean_line and len(clean_line) > 3:
                        ingredients.append(f"‚Ä¢ {clean_line}")
            
            if ingredients:
                return '\n'.join(ingredients[:10])
        
        return self._extract_ingredients_fallback(meal_text)
    
    def _extract_instructions(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        instructions_section = self._find_section(meal_text, ['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '—Ä–µ—Ü–µ–ø—Ç', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—à–∞–≥–∏'])
        
        if instructions_section:
            steps = self._split_into_steps(instructions_section)
            if steps:
                return '\n'.join([f"{i+1}. {step}" for i, step in enumerate(steps)])
        
        return self._generate_simple_instructions(meal_text)
    
    def _extract_cooking_time(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        time_patterns = [
            r'–≤—Ä–µ–º—è[^\d]*(\d+)[^\d]*–º–∏–Ω—É—Ç',
            r'–≥–æ—Ç–æ–≤–∏—Ç—å[^\d]*(\d+)[^\d]*–º–∏–Ω',
            r'(\d+)[^\d]*–º–∏–Ω—É—Ç',
            r'(\d+)[^\d]*–º–∏–Ω'
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, meal_text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} –º–∏–Ω—É—Ç"
        
        return "15-20 –º–∏–Ω—É—Ç"
    
    def _extract_nutrition_info(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–ñ–£"""
        nutrition = {}
        
        protein_match = re.search(r'–±–µ–ª[–∫–∏–∞-—è]*[^\d]*(\d+)[^\d]*–≥', meal_text, re.IGNORECASE)
        if protein_match:
            nutrition['protein'] = f"{protein_match.group(1)}–≥"
        
        fat_match = re.search(r'–∂–∏—Ä[—ã–∞-—è]*[^\d]*(\d+)[^\d]*–≥', meal_text, re.IGNORECASE)
        if fat_match:
            nutrition['fat'] = f"{fat_match.group(1)}–≥"
        
        carb_match = re.search(r'—É–≥–ª–µ–≤–æ–¥[—ã–∞-—è]*[^\d]*(\d+)[^\d]*–≥', meal_text, re.IGNORECASE)
        if carb_match:
            nutrition['carbs'] = f"{carb_match.group(1)}–≥"
        
        return nutrition
    
    def _find_section(self, text, keywords):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–µ–∫—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        for keyword in keywords:
            pattern = f'{keyword}.*?(?=\\n\\s*(?:{"|".join(keywords)}|$))'
            match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
            if match:
                return match.group(0)
        return None
    
    def _split_into_steps(self, text):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        text = re.sub(r'^(–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ|—Ä–µ—Ü–µ–ø—Ç|–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)[:\s]*', '', text, flags=re.IGNORECASE)
        
        patterns = [
            r'\d+[\.\)]\s*(.*?)(?=\d+[\.\)]|$)',
            r'[‚Ä¢\-]\s*(.*?)(?=\\n[‚Ä¢\-]|$)',
            r'(?<=\\n)(.*?)(?=\\n|$)'
        ]
        
        for pattern in patterns:
            steps = re.findall(pattern, text, re.DOTALL)
            if steps and len(steps) > 1:
                return [self._clean_text(step) for step in steps if step.strip()]
        
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        return lines[:7]
    
    def _extract_ingredients_fallback(self, meal_text):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        common_ingredients = [
            '–æ–≤—Å—è–Ω', '–≥—Ä–µ—á–∫', '—Ä–∏—Å', '–∫—É—Ä–∏—Ü', '—Ä—ã–±', '—Ç–≤–æ—Ä–æ–≥', '–π–æ–≥—É—Ä—Ç', '–º–æ–ª–æ–∫',
            '—è–π—Ü', '–æ–≤–æ—â', '—Ñ—Ä—É–∫—Ç', '–æ—Ä–µ—Ö', '—Å—ã—Ä', '—Ö–ª–µ–±', '–º–∞—Å–ª', '—Å–º–µ—Ç–∞–Ω'
        ]
        
        lines = meal_text.split('\n')
        ingredients = []
        
        for line in lines:
            line_lower = line.lower()
            if any(ingredient in line_lower for ingredient in common_ingredients):
                clean_line = re.sub(r'^[‚Ä¢\-*\d\.]\s*', '', line.strip())
                if clean_line and len(clean_line) > 5:
                    ingredients.append(f"‚Ä¢ {clean_line}")
        
        return '\n'.join(ingredients[:8]) if ingredients else "‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç —É—Ç–æ—á–Ω–µ–Ω—ã"
    
    def _generate_simple_instructions(self, meal_text):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
        return """1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
2. –°–ª–µ–¥—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é
3. –ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º"""
    
    def _extract_shopping_list(self, text):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        shopping_section = self._find_section(text, ['—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '–ø–æ–∫—É–ø–∫–∏', '–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é', '—à–æ–ø–∏–Ω–≥-–ª–∏—Å—Ç'])
        
        if shopping_section:
            lines = shopping_section.split('\n')
            items = []
            for line in lines:
                line = line.strip()
                if line and not re.match(r'^(—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫|–ø–æ–∫—É–ø–∫–∏|–ø—Ä–æ–¥—É–∫—Ç—ã|—à–æ–ø–∏–Ω–≥-–ª–∏—Å—Ç)', line.lower()):
                    clean_line = re.sub(r'^[‚Ä¢\-*\d\.]\s*', '', line)
                    if clean_line and len(clean_line) > 3:
                        items.append(clean_line)
            
            if items:
                unique_items = list(dict.fromkeys(items))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                return '\n'.join(unique_items[:25])
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏, –∏—â–µ–º –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
        return self._extract_shopping_list_from_text(text)
    
    def _extract_shopping_list_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ü—Ä–æ–¥—É–∫—Ç—ã:", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ:" –∏ —Ç.–¥.
        shopping_patterns = [
            r'(?:–ø—Ä–æ–¥—É–∫—Ç—ã|–ø–æ–∫—É–ø–∫–∏|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ|–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)[:\s]*\n((?:.*\n){5,20})',
            r'(?:–∑–∞–∫—É–ø–∏—Ç—å|–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏)[^.]*?:\n((?:.*\n){5,15})'
        ]
        
        for pattern in shopping_patterns:
            match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
            if match:
                items_text = match.group(1)
                items = []
                for line in items_text.split('\n'):
                    line = line.strip()
                    if line and len(line) > 3:
                        clean_line = re.sub(r'^[‚Ä¢\-*\d\.]\s*', '', line)
                        items.append(clean_line)
                
                if items:
                    return '\n'.join(items[:20])
        
        return ""
    
    def _generate_shopping_list_from_meals(self, days):
        """–ì–ï–ù–ï–†–ò–†–£–ï–¢ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –±–ª—é–¥"""
        self.logger.info("üõí Generating shopping list from meal ingredients...")
        
        all_ingredients = []
        
        for day in days:
            for meal in day.get('meals', []):
                ingredients_text = meal.get('ingredients', '')
                if ingredients_text:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    ingredients = self._parse_ingredients_from_text(ingredients_text)
                    all_ingredients.extend(ingredients)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_ingredients = list(dict.fromkeys(all_ingredients))
        
        if unique_ingredients:
            shopping_list = '\n'.join(unique_ingredients[:30])
            self.logger.info(f"‚úÖ Generated shopping list with {len(unique_ingredients)} unique items")
            return shopping_list
        else:
            self.logger.warning("‚ö†Ô∏è Could not generate shopping list from ingredients, using fallback")
            return self._generate_default_shopping_list()
    
    def _parse_ingredients_from_text(self, ingredients_text):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        lines = ingredients_text.split('\n')
        ingredients = []
        
        for line in lines:
            line = line.strip()
            if line.startswith('‚Ä¢'):
                ingredient = line[1:].strip()
                if len(ingredient) > 3:
                    ingredients.append(ingredient)
        
        return ingredients
    
    def _generate_default_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
        return """–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥
–§–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏ - 500–≥
–ë–µ–ª–∞—è —Ä—ã–±–∞ (—Ç—Ä–µ—Å–∫–∞, –º–∏–Ω—Ç–∞–π) - 600–≥
–ì–æ–≤—è–¥–∏–Ω–∞ –Ω–µ–∂–∏—Ä–Ω–∞—è - 400–≥
–Ø–π—Ü–∞ - 10 —à—Ç
–¢–≤–æ—Ä–æ–≥ 5% - 500–≥
–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 400–≥
–ú–æ–ª–æ–∫–æ 2.5% - 1 –ª
–°–º–µ—Ç–∞–Ω–∞ 15% - 200–≥
–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π - 150–≥
–ü–æ–º–∏–¥–æ—Ä—ã - 500–≥
–û–≥—É—Ä—Ü—ã - 500–≥
–ö–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è - 500–≥
–ú–æ—Ä–∫–æ–≤—å - 300–≥
–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π - 300–≥
–ß–µ—Å–Ω–æ–∫ - 1 –≥–æ–ª–æ–≤–∫–∞
–ó–µ–ª–µ–Ω—å (–ø–µ—Ç—Ä—É—à–∫–∞, —É–∫—Ä–æ–ø) - 1 –ø—É—á–æ–∫
–Ø–±–ª–æ–∫–∏ - 500–≥
–ë–∞–Ω–∞–Ω—ã - 500–≥
–ê–ø–µ–ª—å—Å–∏–Ω—ã - 300–≥
–ì—Ä–µ—á–∫–∞ - 300–≥
–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 300–≥
–†–∏—Å –±—É—Ä—ã–π - 300–≥
–•–ª–µ–± —Ä–∂–∞–Ω–æ–π - 1 –±—É—Ö–∞–Ω–∫–∞
–ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 150–º–ª
–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ - 150–º–ª"""
    
    def _extract_general_recommendations(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendations = []
        
        water_match = re.search(r'(–ø–∏—Ç—å.*?–≤–æ–¥[–∞-—è]*\s*\d+.*?–º–ª)', text, re.IGNORECASE)
        if water_match:
            recommendations.append(f"üíß {water_match.group(1)}")
        
        regime_match = re.search(r'(—Ä–µ–∂–∏–º.*?—Å–Ω–∞.*?\d+.*?—á–∞—Å)', text, re.IGNORECASE)
        if regime_match:
            recommendations.append(f"üò¥ {regime_match.group(1)}")
        
        return '\n'.join(recommendations) if recommendations else "üí° –°–ª–µ–¥—É–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–ª–∞–Ω–∞"
    
    def _extract_water_regime(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º"""
        water_pattern = r'(?:–≤–æ–¥[–∞-—è]*\s*—Ä–µ–∂–∏–º|–ø–∏—Ç—å[–∞-—è]*\s*–≤–æ–¥[–∞-—è]*).*?(\d+.*?–º–ª)'
        match = re.search(water_pattern, text, re.IGNORECASE)
        return match.group(1) if match else "1.5-2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å"
    
    def _calculate_day_calories(self, day_text):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–Ω—è"""
        calorie_matches = re.findall(r'(\d+)\s*–∫–∫–∞–ª', day_text, re.IGNORECASE)
        if calorie_matches:
            total = sum(int(cal) for cal in calorie_matches[:10])
            return f"{total} –∫–∫–∞–ª"
        return "~1800 –∫–∫–∞–ª"
    
    def _clean_text(self, text):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'[¬´¬ª"‚Äú‚Äù]', '', text)
        return text.strip()
    
    def _create_fallback_plan(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.logger.warning("üîÑ Using fallback plan")
        fallback_plan = {
            'days': self._create_sample_days(),
            'shopping_list': self._generate_default_shopping_list(),
            'general_recommendations': "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
            'water_regime': "1.5-2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å",
            'user_data': user_data,
            'parsed_at': datetime.now().isoformat()
        }
        
        # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–∂–µ –≤ fallback-—Ä–µ–∂–∏–º–µ
        fallback_plan['shopping_list'] = self._generate_shopping_list_from_meals(fallback_plan['days'])
        
        return fallback_plan
    
    def _create_sample_days(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–π"""
        sample_meals = [
            {
                'type': '–ó–ê–í–¢–†–ê–ö',
                'emoji': 'üç≥',
                'name': '–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                'time': '8:00',
                'calories': '350 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 60–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 150–º–ª\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.',
                'instructions': '1. –í–∞—Ä–∏—Ç–µ –æ–≤—Å—è–Ω–∫—É 10 –º–∏–Ω—É—Ç\n2. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ –º–µ–¥\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Ç–µ–ø–ª—ã–º',
                'cooking_time': '15 –º–∏–Ω—É—Ç',
                'nutrition': {'protein': '12–≥', 'carbs': '60–≥', 'fat': '8–≥'}
            },
            {
                'type': '–û–ë–ï–î',
                'emoji': 'üç≤',
                'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π',
                'time': '13:00',
                'calories': '450 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ì—Ä–µ—á–∫–∞ - 80–≥\n‚Ä¢ –û–≥—É—Ä—Ü—ã - 100–≥\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 100–≥',
                'instructions': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏',
                'cooking_time': '25 –º–∏–Ω—É—Ç',
                'nutrition': {'protein': '35–≥', 'carbs': '45–≥', 'fat': '10–≥'}
            }
        ]
        
        days = []
        for i in range(7):
            day_meals = []
            for meal in sample_meals:
                # –ù–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
                varied_meal = meal.copy()
                if i % 2 == 0:
                    varied_meal['ingredients'] = varied_meal['ingredients'].replace('–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', '–ì—Ä–µ—á–Ω–µ–≤—ã–µ —Ö–ª–æ–ø—å—è')
                if i % 3 == 0:
                    varied_meal['ingredients'] = varied_meal['ingredients'].replace('–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', '–§–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏')
                day_meals.append(varied_meal)
            
            days.append({
                'name': f'–î–ï–ù–¨ {i+1}', 
                'meals': day_meals,
                'total_calories': '~1800 –∫–∫–∞–ª'
            })
        
        return days

# ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ ====================

class InteractiveMenu:
    def __init__(self):
        self.days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        self.meals = ['–ó–ê–í–¢–†–ê–ö', '–ü–ï–†–ï–ö–£–° 1', '–û–ë–ï–î', '–ü–ï–†–ï–ö–£–° 2', '–£–ñ–ò–ù']
    
    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù", callback_data="cmd_create_plan")],
            [InlineKeyboardButton("üìà –ß–ï–ö-–ò–ù", callback_data="cmd_checkin")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="cmd_stats")],
            [InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="cmd_help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_data_input(self, step=1):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
        if step == 1:  # –í—ã–±–æ—Ä –ø–æ–ª–∞
            keyboard = [
                [InlineKeyboardButton("üë® –ú–£–ñ–ß–ò–ù–ê", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–ï–ù–©–ò–ù–ê", callback_data="gender_female")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]
            ]
        elif step == 2:  # –í—ã–±–æ—Ä —Ü–µ–ª–∏
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–û–•–£–î–ï–ù–ò–ï", callback_data="goal_weight_loss")],
                [InlineKeyboardButton("üí™ –ù–ê–ë–û–† –ú–ê–°–°–´", callback_data="goal_mass")],
                [InlineKeyboardButton("‚öñÔ∏è –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï", callback_data="goal_maintain")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_gender")]
            ]
        elif step == 3:  # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í–´–°–û–ö–ê–Ø", callback_data="activity_high")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–†–ï–î–ù–Ø–Ø", callback_data="activity_medium")],
                [InlineKeyboardButton("üí§ –ù–ò–ó–ö–ê–Ø", callback_data="activity_low")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_goal")]
            ]
        
        return InlineKeyboardMarkup(keyboard)

    def get_checkin_options(self, step=1):
        """–û–ø—Ü–∏–∏ –¥–ª—è —á–µ–∫-–∏–Ω–∞"""
        if step == 1:  # –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
            keyboard = []
            for i in range(0, 10, 5):
                row = []
                for j in range(1, 6):
                    num = i + j
                    row.append(InlineKeyboardButton(str(num), callback_data=f"wellbeing_{num}"))
                keyboard.append(row)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_main")])
            
        elif step == 2:  # –°–æ–Ω
            keyboard = []
            for i in range(0, 10, 5):
                row = []
                for j in range(1, 6):
                    num = i + j
                    row.append(InlineKeyboardButton(str(num), callback_data=f"sleep_{num}"))
                keyboard.append(row)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_wellbeing")])
        
        return InlineKeyboardMarkup(keyboard)

    def get_days_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π + —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
        keyboard = []
        
        # –ü–µ—Ä–≤—ã–µ 6 –¥–Ω–µ–π –≤ 2 —Ä—è–¥–∞ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        for i in range(0, 6, 3):
            row = []
            for j in range(3):
                if i + j < len(self.days):
                    row.append(InlineKeyboardButton(
                        self.days[i + j], 
                        callback_data=f"day_{i+j}"
                    ))
            keyboard.append(row)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        keyboard.append([
            InlineKeyboardButton(self.days[6], callback_data="day_6"),
            InlineKeyboardButton("üõí –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö", callback_data="shopping_list")
        ])
        
        keyboard.append([InlineKeyboardButton("üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú", callback_data="water_regime")])
        keyboard.append([InlineKeyboardButton("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="back_to_main")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_meals_keyboard(self, day_index):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏"""
        keyboard = []
        emojis = ['üç≥', 'ü•ó', 'üç≤', 'üçé', 'üçõ']
        
        for i, meal in enumerate(self.meals):
            keyboard.append([
                InlineKeyboardButton(
                    f"{emojis[i]} {meal}", 
                    callback_data=f"meal_{day_index}_{i}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –ö –î–ù–Ø–ú", callback_data="back_to_days")])
        keyboard.append([InlineKeyboardButton("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="back_to_main")])
        
        return InlineKeyboardMarkup(keyboard)

    def get_shopping_list_keyboard(self, checked_count, total_count):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        progress = f" ({checked_count}/{total_count})" if total_count > 0 else ""
        
        keyboard = [
            [InlineKeyboardButton(f"‚úÖ –û–ß–ò–°–¢–ò–¢–¨ –û–¢–ú–ï–¢–ö–ò{progress}", callback_data="clear_checked")],
            [InlineKeyboardButton("üìã –°–û–•–†–ê–ù–ò–¢–¨ –°–ü–ò–°–û–ö", callback_data="save_shopping_list")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –ö –î–ù–Ø–ú", callback_data="back_to_days")],
            [InlineKeyboardButton("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_item_toggle_keyboard(self, item_index, is_checked):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        action = "uncheck" if is_checked else "check"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¢–ú–ï–¢–ò–¢–¨" if not is_checked else "‚ùå –°–ù–Ø–¢–¨ –û–¢–ú–ï–¢–ö–£", 
                                callback_data=f"toggle_{action}_{item_index}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –ö –°–ü–ò–°–ö–£", callback_data="back_to_shopping_list")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_water_regime_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –ö –î–ù–Ø–ú", callback_data="back_to_days")],
            [InlineKeyboardButton("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

class InteractivePlan:
    def __init__(self, plan_data, plan_id=None):
        self.plan_data = plan_data
        self.plan_id = plan_id
        self.menu = InteractiveMenu()
    
    def get_meal_details(self, day_index, meal_index):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if day_index < len(self.plan_data['days']):
                day = self.plan_data['days'][day_index]
                if meal_index < len(day['meals']):
                    meal = day['meals'][meal_index]
                    return self._format_meal_details(meal, day['name'])
        except Exception as e:
            logger.error(f"Error getting meal details: {e}")
        
        return self._get_fallback_recipe(day_index, meal_index)
    
    def _format_meal_details(self, meal, day_name):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
        nutrition_text = ""
        if meal.get('nutrition'):
            nutrition = meal['nutrition']
            nutrition_parts = []
            if nutrition.get('protein'):
                nutrition_parts.append(f"–ë: {nutrition['protein']}")
            if nutrition.get('fat'):
                nutrition_parts.append(f"–ñ: {nutrition['fat']}")
            if nutrition.get('carbs'):
                nutrition_parts.append(f"–£: {nutrition['carbs']}")
            if nutrition_parts:
                nutrition_text = f"\nüìä –ë–ñ–£: {', '.join(nutrition_parts)}"
        
        # –°–û–í–ï–¢–´ –ü–û –ü–†–ò–ï–ú–£ –ü–ò–©–ò –ò –í–û–î–ù–û–ú–£ –†–ï–ñ–ò–ú–£
        eating_tips = """
üí° –°–û–í–ï–¢–´ –ü–û –ü–†–ò–ï–ú–£ –ü–ò–©–ò:
‚Ä¢ –ï—à—å—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∂–µ–≤—ã–≤–∞—è
‚Ä¢ –ù–µ –æ—Ç–≤–ª–µ–∫–∞–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä/—Ç–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–º –∫—É—Å–æ—á–∫–æ–º
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–µ–º –ø—Ä–∏ –ª–µ–≥–∫–æ–º —á—É–≤—Å—Ç–≤–µ —Å—ã—Ç–æ—Å—Ç–∏

üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú:
‚Ä¢ –ó–∞ 30 –º–∏–Ω –¥–æ: 200 –º–ª –≤–æ–¥—ã
‚Ä¢ –í–æ –≤—Ä–µ–º—è: –Ω–µ –ø–∏—Ç—å
‚Ä¢ –ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ: 200 –º–ª –≤–æ–¥—ã
"""
        
        return f"""
{meal['emoji']} {meal['type']} - {day_name}

{meal['name']}
‚è∞ {meal['time']} | üçΩÔ∏è {meal['calories']}

üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
{meal['ingredients']}

üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
{meal['instructions']}

‚è±Ô∏è –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {meal.get('cooking_time', '15-20 –º–∏–Ω—É—Ç')}
{nutrition_text}
{eating_tips}
üö´ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: –≤–∞—Ä–∫–∞, —Ç—É—à–µ–Ω–∏–µ, –∑–∞–ø–µ–∫–∞–Ω–∏–µ (–≥—Ä–∏–ª—å –∏—Å–∫–ª—é—á–µ–Ω)
        """
    
    def _get_fallback_recipe(self, day_index, meal_index):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
        return f"""
üç≥ –†–ï–¶–ï–ü–¢ - –î–ï–ù–¨ {day_index + 1}

–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
‚è∞ 8:00 | üçΩÔ∏è ~350 –∫–∫–∞–ª

üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã –≤ –ø–ª–∞–Ω–µ

üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
3. –ì–æ—Ç–æ–≤—å—Ç–µ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º

‚è±Ô∏è –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: 15-20 –º–∏–Ω—É—Ç

üí° –°–û–í–ï–¢–´ –ü–û –ü–†–ò–ï–ú–£ –ü–ò–©–ò:
‚Ä¢ –ï—à—å—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∂–µ–≤—ã–≤–∞—è
‚Ä¢ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–º –∫—É—Å–æ—á–∫–æ–º

üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú:
‚Ä¢ –ó–∞ 30 –º–∏–Ω –¥–æ: 200 –º–ª –≤–æ–¥—ã
‚Ä¢ –í–æ –≤—Ä–µ–º—è: –Ω–µ –ø–∏—Ç—å
‚Ä¢ –ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ: 200 –º–ª –≤–æ–¥—ã

üö´ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: –≤–∞—Ä–∫–∞, —Ç—É—à–µ–Ω–∏–µ, –∑–∞–ø–µ–∫–∞–Ω–∏–µ (–≥—Ä–∏–ª—å –∏—Å–∫–ª—é—á–µ–Ω)
        """
    
    def get_water_regime_text(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        water_regime = self.plan_data.get('water_regime', '1.5-2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å')
        
        return f"""
üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú

üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:

‚è∞ –£–¢–†–û (7:00):
‚Ä¢ 1-2 —Å—Ç–∞–∫–∞–Ω–∞ —Ç–µ–ø–ª–æ–π –≤–æ–¥—ã –Ω–∞—Ç–æ—â–∞–∫
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º
‚Ä¢ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ñ–ö–¢ –∫ —Ä–∞–±–æ—Ç–µ

üçΩÔ∏è –î–û –ï–î–´ (–∑–∞ 30 –º–∏–Ω—É—Ç):
‚Ä¢ 1 —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
‚Ä¢ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∂–µ–ª—É–¥–æ–∫ –∫ –ø—Ä–∏–µ–º—É –ø–∏—â–∏
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç

üö´ –í–û –í–†–ï–ú–Ø –ï–î–´:
‚Ä¢ –ù–µ –ø–∏—Ç—å –≤–æ–¥—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
‚Ä¢ –≠—Ç–æ –º–µ—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—é
‚Ä¢ –†–∞–∑–±–∞–≤–ª—è–µ—Ç –∂–µ–ª—É–¥–æ—á–Ω—ã–π —Å–æ–∫

üïí –ü–û–°–õ–ï –ï–î–´ (—á–µ—Ä–µ–∑ 1 —á–∞—Å):
‚Ä¢ 1 —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —É—Å–≤–æ–µ–Ω–∏—é nutrients
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é

üìà –°–£–¢–û–ß–ù–ê–Ø –ù–û–†–ú–ê:
‚Ä¢ 35 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞
‚Ä¢ –í–∞—à–∞ –Ω–æ—Ä–º–∞: {water_regime}
‚Ä¢ –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è

üí° –°–û–í–ï–¢–´:
‚Ä¢ –ù–æ—Å–∏—Ç–µ —Å —Å–æ–±–æ–π –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã
‚Ä¢ –ü–µ–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
"""
    
    def get_shopping_list_text(self, checked_items=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏"""
        if checked_items is None:
            checked_items = []
        
        shopping_list = self.plan_data.get('shopping_list', '')
        items = shopping_list.split('\n') if shopping_list else []
        
        if not items:
            items = self._generate_default_shopping_list().split('\n')
        
        formatted_items = []
        checked_count = 0
        
        for i, item in enumerate(items):
            if item.strip():
                is_checked = i in checked_items
                marker = "‚úÖ" if is_checked else "‚òê"
                if is_checked:
                    checked_count += 1
                formatted_items.append(f"{marker} {item}")
        
        progress = f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {checked_count}/{len(formatted_items)} —Ç–æ–≤–∞—Ä–æ–≤"
        
        return f"""
üõí –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö

üìã –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:

{chr(10).join(formatted_items[:25])}
{progress}

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
‚Ä¢ –ë–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å —Å–æ–±–æ–π –≤ –º–∞–≥–∞–∑–∏–Ω
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        """
    
    def get_shopping_list_stats(self, checked_items):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        shopping_list = self.plan_data.get('shopping_list', '')
        items = shopping_list.split('\n') if shopping_list else []
        
        if not items:
            items = self._generate_default_shopping_list().split('\n')
        
        total_count = len([item for item in items if item.strip()])
        checked_count = len(checked_items)
        
        return checked_count, total_count
    
    def toggle_item(self, item_index, checked_items):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞"""
        if item_index in checked_items:
            checked_items.remove(item_index)
        else:
            checked_items.append(item_index)
        return checked_items
    
    def clear_checked_items(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—Ç–º–µ—Ç–∫–∏"""
        return []
    
    def _generate_default_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
        return """–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥
–§–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏ - 500–≥
–ë–µ–ª–∞—è —Ä—ã–±–∞ (—Ç—Ä–µ—Å–∫–∞, –º–∏–Ω—Ç–∞–π) - 600–≥
–ì–æ–≤—è–¥–∏–Ω–∞ –Ω–µ–∂–∏—Ä–Ω–∞—è - 400–≥
–Ø–π—Ü–∞ - 10 —à—Ç
–¢–≤–æ—Ä–æ–≥ 5% - 500–≥
–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 400–≥
–ú–æ–ª–æ–∫–æ 2.5% - 1 –ª
–°–º–µ—Ç–∞–Ω–∞ 15% - 200–≥
–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π - 150–≥
–ü–æ–º–∏–¥–æ—Ä—ã - 500–≥
–û–≥—É—Ä—Ü—ã - 500–≥
–ö–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è - 500–≥
–ú–æ—Ä–∫–æ–≤—å - 300–≥
–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π - 300–≥
–ß–µ—Å–Ω–æ–∫ - 1 –≥–æ–ª–æ–≤–∫–∞
–ó–µ–ª–µ–Ω—å (–ø–µ—Ç—Ä—É—à–∫–∞, —É–∫—Ä–æ–ø) - 1 –ø—É—á–æ–∫
–Ø–±–ª–æ–∫–∏ - 500–≥
–ë–∞–Ω–∞–Ω—ã - 500–≥
–ê–ø–µ–ª—å—Å–∏–Ω—ã - 300–≥
–ì—Ä–µ—á–∫–∞ - 300–≥
–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 300–≥
–†–∏—Å –±—É—Ä—ã–π - 300–≥
–•–ª–µ–± —Ä–∂–∞–Ω–æ–π - 1 –±—É—Ö–∞–Ω–∫–∞
–ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 150–º–ª
–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ - 150–º–ª"""

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================

class NutritionBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN not found in environment variables")
            raise ValueError("BOT_TOKEN is required")
            
        init_database()
        
        try:
            self.application = Application.builder().token(self.bot_token).build()
            self.menu = InteractiveMenu()
            self._setup_handlers()
            
            shutdown_manager.setup_signal_handlers(self.application)
            logger.info("‚úÖ Bot initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }
            save_user(user_data)
            
            welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Å AI!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
            if is_admin(user.id):
                welcome_text += "\nüëë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∞–º!"
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            # –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if data == "cmd_create_plan":
                await self._handle_create_plan(query, context)
            elif data == "cmd_checkin":
                await self._handle_checkin(query, context)
            elif data == "cmd_stats":
                await self._handle_stats(query, context)
            elif data == "cmd_help":
                await self._handle_help(query, context)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            elif data == "back_to_main":
                await self._show_main_menu(query)
            elif data == "back_to_days":
                await self._show_days_menu(query, context)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
            elif data.startswith("gender_"):
                await self._handle_gender(query, context, data)
            elif data.startswith("goal_"):
                await self._handle_goal(query, context, data)
            elif data.startswith("activity_"):
                await self._handle_activity(query, context, data)
            elif data in ["back_to_gender", "back_to_goal"]:
                await self._handle_back_navigation(query, context, data)
            
            # –ß–µ–∫-–∏–Ω
            elif data.startswith("wellbeing_"):
                await self._handle_wellbeing(query, context, data)
            elif data.startswith("sleep_"):
                await self._handle_sleep(query, context, data)
            elif data == "back_to_wellbeing":
                await self._handle_checkin(query, context)
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
            elif data.startswith("day_"):
                await self._handle_day_selection(query, context, data)
            elif data.startswith("meal_"):
                await self._handle_meal_selection(query, context, data)
            
            # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            elif data == "shopping_list":
                await self._handle_shopping_list(query, context)
            elif data == "back_to_shopping_list":
                await self._handle_shopping_list(query, context)
            elif data.startswith("toggle_"):
                await self._handle_toggle_item(query, context, data)
            elif data == "clear_checked":
                await self._handle_clear_checked(query, context)
            elif data == "save_shopping_list":
                await self._handle_save_shopping_list(query, context)
            
            # –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º
            elif data == "water_regime":
                await self._handle_water_regime(query, context)
                
        except Exception as e:
            logger.error(f"Error in callback handler: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    # ==================== –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê ====================
    
    async def _handle_create_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        user_id = query.from_user.id
        
        if not is_admin(user_id) and not await self._check_subscription(user_id):
            await self._ask_for_subscription(query)
            return
            
        if not is_admin(user_id) and not can_make_request(user_id):
            days_remaining = get_days_until_next_plan(user_id)
            await query.edit_message_text(
                f"‚è≥ –í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n–°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        context.user_data['plan_data'] = {}
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=self.menu.get_plan_data_input(step=1)
        )
    
    async def _handle_gender(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        gender = '–ú—É–∂—á–∏–Ω–∞' if data == 'gender_male' else '–ñ–µ–Ω—â–∏–Ω–∞'
        context.user_data['plan_data']['gender'] = gender
        
        await query.edit_message_text(
            f"‚úÖ –ü–æ–ª: {gender}\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=self.menu.get_plan_data_input(step=2)
        )
    
    async def _handle_goal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
        goal_map = {'weight_loss': '–ø–æ—Ö—É–¥–µ–Ω–∏–µ', 'mass': '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã', 'maintain': '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'}
        goal = goal_map[data.split('_')[1]]
        context.user_data['plan_data']['goal'] = goal
        
        await query.edit_message_text(
            f"‚úÖ –ü–æ–ª: {context.user_data['plan_data']['gender']}\n"
            f"‚úÖ –¶–µ–ª—å: {goal}\n\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=self.menu.get_plan_data_input(step=3)
        )
    
    async def _handle_activity(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        activity_map = {'high': '–≤—ã—Å–æ–∫–∞—è', 'medium': '—Å—Ä–µ–¥–Ω—è—è', 'low': '–Ω–∏–∑–∫–∞—è'}
        activity = activity_map[data.split('_')[1]]
        context.user_data['plan_data']['activity'] = activity
        
        context.user_data['awaiting_input'] = 'plan_details'
        await query.edit_message_text(
            f"‚úÖ –ü–æ–ª: {context.user_data['plan_data']['gender']}\n"
            f"‚úÖ –¶–µ–ª—å: {context.user_data['plan_data']['goal']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}\n\n"
            "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)\n‚Ä¢ –†–æ—Å—Ç (—Å–º)\n‚Ä¢ –í–µ—Å (–∫–≥)\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä: 30, 180, 80\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_goal")]
            ])
        )
    
    async def _handle_back_navigation(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥"""
        if data == "back_to_gender":
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
        elif data == "back_to_goal":
            await query.edit_message_text(
                f"‚úÖ –ü–æ–ª: {context.user_data['plan_data']['gender']}\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=self.menu.get_plan_data_input(step=2)
            )
    
    # ==================== –ß–ï–ö-–ò–ù ====================
    
    async def _handle_checkin(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫-–∏–Ω–∞"""
        context.user_data['checkin_data'] = {}
        await query.edit_message_text(
            "üìà –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ß–ï–ö-–ò–ù\n\n1Ô∏è‚É£ –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ (1-10):",
            reply_markup=self.menu.get_checkin_options(step=1)
        )
    
    async def _handle_wellbeing(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è"""
        wellbeing = int(data.split('_')[1])
        context.user_data['checkin_data']['wellbeing'] = wellbeing
        
        await query.edit_message_text(
            f"‚úÖ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {wellbeing}/10\n\n2Ô∏è‚É£ –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (1-10):",
            reply_markup=self.menu.get_checkin_options(step=2)
        )
    
    async def _handle_sleep(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
        sleep = int(data.split('_')[1])
        context.user_data['checkin_data']['sleep'] = sleep
        
        context.user_data['awaiting_input'] = 'checkin_details'
        await query.edit_message_text(
            f"‚úÖ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {context.user_data['checkin_data']['wellbeing']}/10\n"
            f"‚úÖ –°–æ–Ω: {sleep}/10\n\n"
            "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "‚Ä¢ –í–µ—Å (–∫–≥)\n‚Ä¢ –û–±—ä–µ–º —Ç–∞–ª–∏–∏ (—Å–º)\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä: 70.5, 85",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_wellbeing")]
            ])
        )
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ü–û–ú–û–©–¨ ====================
    
    async def _handle_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = query.from_user.id
        checkins = get_user_stats(user_id)
        
        if not checkins:
            await query.edit_message_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫-–∏–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        stats_text = "üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        for checkin in reversed(checkins):
            date_str = datetime.fromisoformat(checkin[0]).strftime('%d.%m')
            stats_text += f"üìÖ {date_str}: –í–µ—Å {checkin[1]}–∫–≥, –¢–∞–ª–∏—è {checkin[2]}—Å–º\n"
        
        await query.edit_message_text(
            stats_text,
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _handle_help(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        help_text = """
‚ùì –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£

üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI-–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
üìà –ß–ï–ö-–ò–ù - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞  
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 7 –¥–Ω–µ–π

üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é
üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã

ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã
"""
        await query.edit_message_text(
            help_text,
            reply_markup=self.menu.get_main_menu()
        )
    
    # ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ü–õ–ê–ù ====================
    
    async def _handle_day_selection(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
        day_index = int(data.split('_')[1])
        interactive_plan = context.user_data.get('interactive_plan')
        
        await query.edit_message_text(
            f"üçΩÔ∏è {interactive_plan.menu.days[day_index]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:",
            reply_markup=interactive_plan.menu.get_meals_keyboard(day_index)
        )
    
    async def _handle_meal_selection(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        _, day_index, meal_index = data.split('_')
        day_index = int(day_index)
        meal_index = int(meal_index)
        interactive_plan = context.user_data.get('interactive_plan')
        
        recipe_text = interactive_plan.get_meal_details(day_index, meal_index)
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –ö –ü–†–ò–ï–ú–ê–ú", callback_data=f"day_{day_index}")],
            [InlineKeyboardButton("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            recipe_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _show_days_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–Ω–µ–π"""
        interactive_plan = context.user_data.get('interactive_plan')
        await query.edit_message_text(
            "üéâ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê 7 –î–ù–ï–ô!\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
            reply_markup=interactive_plan.menu.get_days_keyboard()
        )
    
    # ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö ====================
    
    async def _handle_shopping_list(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        interactive_plan = context.user_data.get('interactive_plan')
        user_id = query.from_user.id
        
        if not interactive_plan or not interactive_plan.plan_id:
            await query.edit_message_text(
                "‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –ë–î
        shopping_data = get_shopping_list(user_id, interactive_plan.plan_id)
        checked_items = shopping_data['checked_items'] if shopping_data else []
        
        checked_count, total_count = interactive_plan.get_shopping_list_stats(checked_items)
        shopping_text = interactive_plan.get_shopping_list_text(checked_items)
        
        await query.edit_message_text(
            shopping_text,
            reply_markup=self.menu.get_shopping_list_keyboard(checked_count, total_count)
        )
    
    async def _handle_toggle_item(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        interactive_plan = context.user_data.get('interactive_plan')
        user_id = query.from_user.id
        
        if not interactive_plan or not interactive_plan.plan_id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        shopping_data = get_shopping_list(user_id, interactive_plan.plan_id)
        checked_items = shopping_data['checked_items'] if shopping_data else []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞
        action, item_index = data.split('_')[1], int(data.split('_')[2])
        
        if action == 'check':
            checked_items = interactive_plan.toggle_item(item_index, checked_items)
        elif action == 'uncheck':
            checked_items = interactive_plan.toggle_item(item_index, checked_items)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        update_checked_items(user_id, interactive_plan.plan_id, checked_items)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        checked_count, total_count = interactive_plan.get_shopping_list_stats(checked_items)
        shopping_text = interactive_plan.get_shopping_list_text(checked_items)
        
        await query.edit_message_text(
            shopping_text,
            reply_markup=self.menu.get_shopping_list_keyboard(checked_count, total_count)
        )
        
        action_text = "–æ—Ç–º–µ—á–µ–Ω" if action == "check" else "—Å–Ω—è—Ç–∞ –æ—Ç–º–µ—Ç–∫–∞"
        await query.answer(f"‚úÖ –¢–æ–≤–∞—Ä {action_text}")
    
    async def _handle_clear_checked(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–º–µ—Ç–æ–∫"""
        interactive_plan = context.user_data.get('interactive_plan')
        user_id = query.from_user.id
        
        if not interactive_plan or not interactive_plan.plan_id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É")
            return
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–º–µ—Ç–∫–∏
        checked_items = interactive_plan.clear_checked_items()
        update_checked_items(user_id, interactive_plan.plan_id, checked_items)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        shopping_text = interactive_plan.get_shopping_list_text(checked_items)
        
        await query.edit_message_text(
            shopping_text,
            reply_markup=self.menu.get_shopping_list_keyboard(0, 0)
        )
        
        await query.answer("‚úÖ –í—Å–µ –æ—Ç–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã")
    
    async def _handle_save_shopping_list(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞"""
        await query.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ!")
    
    # ==================== –í–û–î–ù–´–ô –†–ï–ñ–ò–ú ====================
    
    async def _handle_water_regime(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        interactive_plan = context.user_data.get('interactive_plan')
        
        if not interactive_plan:
            await query.edit_message_text(
                "‚ùå –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        water_text = interactive_plan.get_water_regime_text()
        
        await query.edit_message_text(
            water_text,
            reply_markup=self.menu.get_water_regime_keyboard()
        )
    
    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if shutdown_manager.should_stop():
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.")
            return
            
        user_id = update.effective_user.id
        text = update.message.text
        
        if context.user_data.get('awaiting_input') == 'plan_details':
            await self._process_plan_details(update, context, text)
        elif context.user_data.get('awaiting_input') == 'checkin_details':
            await self._process_checkin_details(update, context, text)
        else:
            await update.message.reply_text(
                "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_plan_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 3:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            
            age, height, weight = int(parts[0]), int(parts[1]), float(parts[2])
            
            user_data = {
                **context.user_data['plan_data'],
                'age': age,
                'height': height,
                'weight': weight,
                'user_id': update.effective_user.id,
                'username': update.effective_user.username
            }
            
            processing_msg = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à AI-–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan_data = await self._generate_plan_with_gpt(user_data)
            plan_id = save_plan(user_data['user_id'], plan_data)
            update_user_limit(user_data['user_id'])
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
            interactive_plan = InteractivePlan(plan_data, plan_id)
            context.user_data['interactive_plan'] = interactive_plan
            
            await processing_msg.delete()
            
            await update.message.reply_text(
                "üéâ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê 7 –î–ù–ï–ô!\n\n"
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:",
                reply_markup=interactive_plan.menu.get_days_keyboard()
            )
            
            context.user_data['awaiting_input'] = None
            
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç, –í–µ—Å\n–ü—Ä–∏–º–µ—Ä: 30, 180, 80"
            )
    
    async def _process_checkin_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —á–µ–∫-–∏–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 2:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            
            weight, waist = float(parts[0]), int(parts[1])
            wellbeing = context.user_data['checkin_data']['wellbeing']
            sleep = context.user_data['checkin_data']['sleep']
            
            save_checkin(update.effective_user.id, weight, waist, wellbeing, sleep)
            
            feedback = self._analyze_checkin(wellbeing, sleep)
            await update.message.reply_text(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n{feedback}",
                reply_markup=self.menu.get_main_menu()
            )
            
            context.user_data['awaiting_input'] = None
            
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–µ—Å, –¢–∞–ª–∏—è\n–ü—Ä–∏–º–µ—Ä: 70.5, 85"
            )
    
    def _analyze_checkin(self, wellbeing, sleep):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–∏–Ω–∞"""
        feedback = []
        if wellbeing >= 8: 
            feedback.append("üéâ –û—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ!")
        elif wellbeing >= 6: 
            feedback.append("üëç –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        else: 
            feedback.append("üí§ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        if sleep >= 8: 
            feedback.append("üò¥ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ!")
        elif sleep >= 6: 
            feedback.append("üõå –°–æ–Ω –≤ –Ω–æ—Ä–º–µ")
        else: 
            feedback.append("üåô –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Ç—å 7-8 —á–∞—Å–æ–≤")
        
        return "\n".join(feedback)
    
    # ==================== YANDEX GPT ====================
    
    async def _generate_plan_with_gpt(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ Yandex GPT"""
        if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
            logger.error("‚ùå YANDEX GPT KEYS NOT CONFIGURED!")
            await asyncio.sleep(2)
            return self._generate_detailed_fallback_plan(user_data)
        
        prompt = self._create_gpt_prompt(user_data)
        logger.info(f"üîÆ Sending request to Yandex GPT...")
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "Authorization": f"Api-Key {YANDEX_API_KEY}",
                    "Content-Type": "application/json"
                }
                
                data = {
                    "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
                    "completionOptions": {
                        "stream": False,
                        "temperature": 0.7,
                        "maxTokens": 8000
                    },
                    "messages": [
                        {
                            "role": "system", 
                            "text": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ä–µ—Ü–µ–ø—Ç–∞–º."
                        },
                        {
                            "role": "user",
                            "text": prompt
                        }
                    ]
                }
                
                async with session.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=120) as response:
                    if response.status == 200:
                        result = await response.json()
                        gpt_response = result['result']['alternatives'][0]['message']['text']
                        logger.info("‚úÖ Yandex GPT response received successfully!")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
                        parser = GPTParser()
                        structured_plan = parser.parse_plan_response(gpt_response, user_data)
                        return structured_plan
                    else:
                        logger.error(f"‚ùå Yandex GPT API error {response.status}")
                        return self._generate_detailed_fallback_plan(user_data)
                        
        except Exception as e:
            logger.error(f"‚ùå Error calling Yandex GPT: {e}")
            return self._generate_detailed_fallback_plan(user_data)

    def _create_gpt_prompt(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è Yandex GPT"""
        gender = user_data['gender']
        goal = user_data['goal']
        activity = user_data['activity']
        age = user_data['age']
        height = user_data['height']
        weight = user_data['weight']
        
        return f"""
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π —Å —É—á–µ—Ç–æ–º:

üë§ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
‚Ä¢ –ü–æ–ª: {gender}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
‚Ä¢ –†–æ—Å—Ç: {height} —Å–º
‚Ä¢ –í–µ—Å: {weight} –∫–≥
‚Ä¢ –¶–µ–ª—å: {goal}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
‚Ä¢ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å (–∑–∞–≤—Ç—Ä–∞–∫, –ø–µ—Ä–µ–∫—É—Å 1, –æ–±–µ–¥, –ø–µ—Ä–µ–∫—É—Å 2, —É–∂–∏–Ω)
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£
‚Ä¢ –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–∏ "{goal}"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ–∂–∏—Ö —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç

üìã –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:

–î–ï–ù–¨ 1 / –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö

–ó–ê–í–¢–†–ê–ö (8:00)
[–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞] - [–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å] –∫–∫–∞–ª

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. [—à–∞–≥ 1]
2. [—à–∞–≥ 2]

–ü–ï–†–ï–ö–£–° 1 (11:00)
[–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...]

–û–ë–ï–î (13:00)
[–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...]

–ü–ï–†–ï–ö–£–° 2 (16:00)  
[–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...]

–£–ñ–ò–ù (19:00)
[–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...]

[–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤—Å–µ—Ö 7 –¥–Ω–µ–π]

üõí –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö –ù–ê –ù–ï–î–ï–õ–Æ:
[–¢–û–ß–ù–û–ï –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏]

üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
[—Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É, —Ä–∞—Å–ø–æ—Ä—è–¥–∫—É –¥–Ω—è]

üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú:
[—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã]

–í–ê–ñ–ù–û: –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–æ–ª–∂–µ–Ω –¢–û–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏–∑ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏!
"""
    def _generate_detailed_fallback_plan(self, user_data):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω"""
        parser = GPTParser()
        return parser._create_fallback_plan(user_data)
    
    # ==================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====================
    
    async def _check_subscription(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            if is_admin(user_id):
                return True
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
            return True
        except Exception as e:
            logger.error(f"Error checking subscription: {e}")
            return True
    
    async def _ask_for_subscription(self, query):
        """–ü—Ä–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø", callback_data="cmd_create_plan")],
            [InlineKeyboardButton("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="back_to_main")]
        ]
        await query.edit_message_text(
            f"‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception: {context.error}")
    
    def run_web_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        def run_flask():
            port = int(os.getenv('PORT', 10000))
            app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
        threading.Thread(target=run_flask, daemon=True).start()
        logger.info(f"üåê Web server started on port {os.getenv('PORT', 10000)}")
    
    def run_bot(self, retry_count=0):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        MAX_RETRIES = 2
        
        try:
            logger.info("üîß Starting bot polling...")
            self.application.run_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query']
            )
        except Exception as e:
            if "Conflict" in str(e):
                logger.error("üí• CONFLICT: Another bot instance is running. Exiting.")
                sys.exit(1)
            elif retry_count < MAX_RETRIES:
                logger.error(f"‚ùå Bot error ({retry_count + 1}/{MAX_RETRIES}): {e}")
                time.sleep(30)
                self.run_bot(retry_count + 1)
            else:
                logger.error(f"üí• Max retries reached. Exiting.")
                sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting nutrition bot services...")
    
    if not check_single_instance():
        logger.error("‚ùå Another instance is already running. Exiting.")
        return
    
    try:
        bot = NutritionBot()
        bot.run_web_server()
        time.sleep(5)
        bot.run_bot()
    except Exception as e:
        logger.error(f"üí• Failed to start services: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
