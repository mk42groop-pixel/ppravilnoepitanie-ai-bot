import os
import logging
import threading
import time
import sqlite3
import json
import requests
import signal
import atexit
import socket
import sys
import re
from datetime import datetime, timedelta
from flask import Flask, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

ADMIN_USER_ID = 362423055
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('PRAGMA journal_mode=WAL')
    cursor.execute('PRAGMA synchronous=NORMAL')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS nutrition_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_checkins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            weight REAL,
            waist_circumference INTEGER,
            wellbeing_score INTEGER,
            sleep_quality INTEGER,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_limits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            last_plan_date TIMESTAMP,
            plan_count INTEGER DEFAULT 0
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['user_id'], user_data['username'], user_data['first_name'], user_data['last_name']))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving user: {e}")
    finally:
        conn.close()

def is_admin(user_id):
    return user_id == ADMIN_USER_ID

def can_make_request(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return True
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return True
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_since_last_plan = (datetime.now() - last_plan_date).days
        
        conn.close()
        return days_since_last_plan >= 7
        
    except Exception as e:
        logger.error(f"Error checking request limit: {e}")
        return True

def update_user_limit(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        cursor.execute('''
            INSERT OR REPLACE INTO user_limits (user_id, last_plan_date, plan_count)
            VALUES (?, ?, COALESCE((SELECT plan_count FROM user_limits WHERE user_id = ?), 0) + 1)
        ''', (user_id, current_time, user_id))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error updating user limits: {e}")

def get_days_until_next_plan(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return 0
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return 0
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_passed = (datetime.now() - last_plan_date).days
        days_remaining = 7 - days_passed
        
        conn.close()
        return max(0, days_remaining)
        
    except Exception as e:
        logger.error(f"Error getting days until next plan: {e}")
        return 0

def save_plan(user_id, plan_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO nutrition_plans (user_id, plan_data) VALUES (?, ?)', 
                      (user_id, json.dumps(plan_data)))
        plan_id = cursor.lastrowid
        conn.commit()
        return plan_id
    except Exception as e:
        logger.error(f"Error saving plan: {e}")
        return None
    finally:
        conn.close()

def save_checkin(user_id, weight, waist, wellbeing, sleep):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO daily_checkins (user_id, weight, waist_circumference, wellbeing_score, sleep_quality)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, weight, waist, wellbeing, sleep))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving checkin: {e}")
    finally:
        conn.close()

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT date, weight, waist_circumference, wellbeing_score, sleep_quality
            FROM daily_checkins WHERE user_id = ? ORDER BY date DESC LIMIT 7
        ''', (user_id,))
        checkins = cursor.fetchall()
        return checkins
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return []
    finally:
        conn.close()

def get_latest_plan(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT plan_data FROM nutrition_plans 
            WHERE user_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (user_id,))
        result = cursor.fetchone()
        return json.loads(result[0]) if result else None
    except Exception as e:
        logger.error(f"Error getting latest plan: {e}")
        return None
    finally:
        conn.close()

def get_user_plans_count(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT COUNT(*) FROM nutrition_plans WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else 0
    except Exception as e:
        logger.error(f"Error getting user plans count: {e}")
        return 0
    finally:
        conn.close()

# ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ ====================

class InteractiveMenu:
    def __init__(self):
        self.days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        self.meals = ['–ó–ê–í–¢–†–ê–ö', '–ü–ï–†–ï–ö–£–° 1', '–û–ë–ï–î', '–ü–ï–†–ï–ö–£–° 2', '–£–ñ–ò–ù']
    
    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù", callback_data="create_plan")],
            [InlineKeyboardButton("üìà –ß–ï–ö-–ò–ù", callback_data="checkin")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
            [InlineKeyboardButton("üìã –ú–û–ô –ü–õ–ê–ù", callback_data="my_plan")],
            [InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_data_input(self, step=1):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
        if step == 1:  # –í—ã–±–æ—Ä –ø–æ–ª–∞
            keyboard = [
                [InlineKeyboardButton("üë® –ú–£–ñ–ß–ò–ù–ê", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–ï–ù–©–ò–ù–ê", callback_data="gender_female")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        elif step == 2:  # –í—ã–±–æ—Ä —Ü–µ–ª–∏
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–û–•–£–î–ï–ù–ò–ï", callback_data="goal_weight_loss")],
                [InlineKeyboardButton("üí™ –ù–ê–ë–û–† –ú–ê–°–°–´", callback_data="goal_mass")],
                [InlineKeyboardButton("‚öñÔ∏è –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï", callback_data="goal_maintain")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_gender")]
            ]
        elif step == 3:  # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í–´–°–û–ö–ê–Ø", callback_data="activity_high")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–†–ï–î–ù–Ø–Ø", callback_data="activity_medium")],
                [InlineKeyboardButton("üí§ –ù–ò–ó–ö–ê–Ø", callback_data="activity_low")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_goal")]
            ]
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_checkin_menu(self):
        """–ú–µ–Ω—é –¥–ª—è —á–µ–∫-–∏–Ω–∞"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–ê–ü–ò–°–ê–¢–¨ –î–ê–ù–ù–´–ï", callback_data="checkin_data")],
            [InlineKeyboardButton("üìä –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–°–¢–û–†–ò–Æ", callback_data="checkin_history")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_management_menu(self):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –ù–ï–î–ï–õ–Æ", callback_data="view_week")],
            [InlineKeyboardButton("üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö", callback_data="shopping_cart")],
            [InlineKeyboardButton("üìÑ –°–ö–ê–ß–ê–¢–¨ –í TXT", callback_data="download_plan")],
            [InlineKeyboardButton("üìä –ò–ù–§–û –û –ü–õ–ê–ù–ê–•", callback_data="plan_info")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_week_days_menu(self):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", callback_data="day_0")],
            [InlineKeyboardButton("üìÖ –í–¢–û–†–ù–ò–ö", callback_data="day_1")],
            [InlineKeyboardButton("üìÖ –°–†–ï–î–ê", callback_data="day_2")],
            [InlineKeyboardButton("üìÖ –ß–ï–¢–í–ï–†–ì", callback_data="day_3")],
            [InlineKeyboardButton("üìÖ –ü–Ø–¢–ù–ò–¶–ê", callback_data="day_4")],
            [InlineKeyboardButton("üìÖ –°–£–ë–ë–û–¢–ê", callback_data="day_5")],
            [InlineKeyboardButton("üìÖ –í–û–°–ö–†–ï–°–ï–ù–¨–ï", callback_data="day_6")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_plan_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_day_meals_menu(self, day_index):
        """–ú–µ–Ω—é –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        meals = ['üç≥ –ó–ê–í–¢–†–ê–ö', 'ü•ó –ü–ï–†–ï–ö–£–° 1', 'üç≤ –û–ë–ï–î', 'üçé –ü–ï–†–ï–ö–£–° 2', 'üçõ –£–ñ–ò–ù']
        keyboard = []
        
        for i, meal in enumerate(meals):
            keyboard.append([InlineKeyboardButton(meal, callback_data=f"meal_{day_index}_{i}")])
        
        keyboard.append([InlineKeyboardButton("üìÖ –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –î–ï–ù–¨", callback_data="view_week")])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data="back_to_plan_menu")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_meal_detail_menu(self, day_index, meal_index):
        """–ú–µ–Ω—é –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–õ–ï–î–£–Æ–©–ò–ô –ü–†–ò–ï–ú –ü–ò–©–ò", callback_data=f"next_meal_{day_index}_{meal_index}")],
            [InlineKeyboardButton("üìÖ –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –î–ï–ù–¨", callback_data="view_week")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data="back_to_plan_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_shopping_cart_menu(self):
        """–ú–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫"""
        keyboard = [
            [InlineKeyboardButton("üìÑ –°–ö–ê–ß–ê–¢–¨ –°–ü–ò–°–û–ö", callback_data="download_shopping_list")],
            [InlineKeyboardButton("üìÖ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –ù–ï–î–ï–õ–Æ", callback_data="view_week")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data="back_to_plan_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_back_menu(self):
        """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

# ==================== FLASK APP ====================

app = Flask(__name__)

@app.route('/')
def home():
    return """
    <h1>ü§ñ Nutrition Bot is Running!</h1>
    <p>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
    <p><a href="/health">Health Check</a></p>
    <p>üïí Last update: {}</p>
    """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

@app.route('/health')
def health_check():
    return jsonify({
        "status": "healthy", 
        "service": "nutrition-bot",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0"
    })

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================

class NutritionBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN not found")
            raise ValueError("BOT_TOKEN is required")
            
        init_database()
        
        try:
            self.application = Application.builder().token(self.bot_token).build()
            self.menu = InteractiveMenu()
            self._setup_handlers()
            
            logger.info("‚úÖ Bot initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("dbstats", self.dbstats_command))
        self.application.add_handler(CommandHandler("export_plan", self.export_plan_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }
            save_user(user_data)
            
            welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Å AI!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
            if is_admin(user.id):
                welcome_text += "\nüëë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∞–º!"
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def dbstats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = update.effective_user.id
            if not is_admin(user_id):
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("SELECT COUNT(*) FROM users")
            users_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM nutrition_plans")
            plans_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM daily_checkins")
            checkins_count = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞–Ω—ã
            cursor.execute('''
                SELECT u.user_id, u.username, np.created_at 
                FROM nutrition_plans np 
                JOIN users u ON np.user_id = u.user_id 
                ORDER BY np.created_at DESC LIMIT 5
            ''')
            recent_plans = cursor.fetchall()
            
            # –†–∞–∑–º–µ—Ä –ë–î
            db_size = os.path.getsize('nutrition_bot.db') if os.path.exists('nutrition_bot.db') else 0
            
            conn.close()
            
            stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üìã –ü–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è: {plans_count}
üìà –ß–µ–∫-–∏–Ω–æ–≤: {checkins_count}
üíæ –†–∞–∑–º–µ—Ä –ë–î: {db_size / 1024:.1f} KB

üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã:
"""
            for plan in recent_plans:
                user_id, username, created_at = plan
                username_display = f"@{username}" if username else "–±–µ–∑ username"
                stats_text += f"‚Ä¢ ID: {user_id} ({username_display}) - {created_at[:10]}\n"
            
            await update.message.reply_text(stats_text)
            
        except Exception as e:
            logger.error(f"Error in db command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î")
    
    async def export_plan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–∞ –≤ TXT"""
        try:
            user_id = update.effective_user.id
            await update.message.reply_text("üìÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à –ø–ª–∞–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
            await self.send_plan_as_file(update, context, user_id)
            
        except Exception as e:
            logger.error(f"Error in export plan command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        logger.info(f"üì® Callback received: {data}")
        
        try:
            # –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
            if data == "create_plan":
                await self._handle_create_plan(query, context)
            elif data == "checkin":
                await self._handle_checkin_menu(query, context)
            elif data == "stats":
                await self._handle_stats(query, context)
            elif data == "my_plan":
                await self._handle_my_plan_menu(query, context)
            elif data == "help":
                await self._handle_help(query, context)
            elif data == "plan_info":
                await self._handle_plan_info(query, context)
            elif data == "download_plan":
                await self._handle_download_plan(query, context)
            elif data == "view_week":
                await self._handle_view_week(query, context)
            elif data == "shopping_cart":
                await self._handle_shopping_cart(query, context)
            elif data == "download_shopping_list":
                await self._handle_download_shopping_list(query, context)
            elif data == "back_to_plan_menu":
                await self._handle_my_plan_menu(query, context)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
            elif data == "back_main":
                await self._show_main_menu(query)
            elif data == "back_gender":
                await self._handle_gender_back(query, context)
            elif data == "back_goal":
                await self._handle_goal_back(query, context)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
            elif data.startswith("gender_"):
                await self._handle_gender(query, context, data)
            elif data.startswith("goal_"):
                await self._handle_goal(query, context, data)
            elif data.startswith("activity_"):
                await self._handle_activity(query, context, data)
            
            # –ß–µ–∫-–∏–Ω
            elif data == "checkin_data":
                await self._handle_checkin_data(query, context)
            elif data == "checkin_history":
                await self._handle_checkin_history(query, context)
            
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
            elif data.startswith("day_"):
                await self._handle_day_selection(query, context, data)
            elif data.startswith("meal_"):
                await self._handle_meal_selection(query, context, data)
            elif data.startswith("next_meal_"):
                await self._handle_next_meal(query, context, data)
            
            else:
                logger.warning(f"‚ö†Ô∏è Unknown callback data: {data}")
                await query.edit_message_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error in callback handler: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_create_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not is_admin(user_id) and not can_make_request(user_id):
                days_remaining = get_days_until_next_plan(user_id)
                await query.edit_message_text(
                    f"‚è≥ –í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n–°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
            context.user_data['plan_data'] = {}
            context.user_data['plan_step'] = 1
            
            logger.info(f"üîß Starting plan creation for user {user_id}")
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in create plan handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
        try:
            context.user_data['plan_step'] = 1
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
        except Exception as e:
            logger.error(f"‚ùå Error in gender back handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_goal_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏"""
        try:
            context.user_data['plan_step'] = 2
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=self.menu.get_plan_data_input(step=2)
            )
        except Exception as e:
            logger.error(f"‚ùå Error in goal back handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        try:
            gender_map = {
                "gender_male": "–ú–£–ñ–ß–ò–ù–ê",
                "gender_female": "–ñ–ï–ù–©–ò–ù–ê"
            }
            
            context.user_data['plan_data']['gender'] = gender_map[data]
            context.user_data['plan_step'] = 2
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=self.menu.get_plan_data_input(step=2)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in gender handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_goal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
        try:
            goal_map = {
                "goal_weight_loss": "–ü–û–•–£–î–ï–ù–ò–ï",
                "goal_mass": "–ù–ê–ë–û–† –ú–ê–°–°–´", 
                "goal_maintain": "–ü–û–î–î–ï–†–ñ–ê–ù–ò–ï"
            }
            
            context.user_data['plan_data']['goal'] = goal_map[data]
            context.user_data['plan_step'] = 3
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=self.menu.get_plan_data_input(step=3)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in goal handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_activity(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            activity_map = {
                "activity_high": "–í–´–°–û–ö–ê–Ø",
                "activity_medium": "–°–†–ï–î–ù–Ø–Ø",
                "activity_low": "–ù–ò–ó–ö–ê–Ø"
            }
            
            context.user_data['plan_data']['activity'] = activity_map[data]
            context.user_data['awaiting_input'] = 'plan_details'
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 30, 180, 75\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu",
                reply_markup=self.menu.get_back_menu()
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in activity handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin_menu(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —á–µ–∫-–∏–Ω–∞"""
        try:
            await query.edit_message_text(
                "üìà –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ß–ï–ö-–ò–ù\n\n"
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
                "‚Ä¢ –í–µ—Å\n"
                "‚Ä¢ –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏\n"
                "‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n"
                "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.menu.get_checkin_menu()
            )
        except Exception as e:
            logger.error(f"Error in checkin menu handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–µ–∫-–∏–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin_data(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞"""
        try:
            context.user_data['awaiting_input'] = 'checkin_data'
            
            await query.edit_message_text(
                "üìù –í–í–ï–î–ò–¢–ï –î–ê–ù–ù–´–ï –ß–ï–ö-–ò–ù–ê\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–í–µ—Å (–∫–≥), –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º), –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ (1-5), –°–æ–Ω (1-5)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3\n\n"
                "üìä –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫:\n"
                "‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: 1(–ø–ª–æ—Ö–æ) - 5(–æ—Ç–ª–∏—á–Ω–æ)\n"
                "‚Ä¢ –°–æ–Ω: 1(–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞) - 5(–æ—Ç–ª–∏—á–Ω–æ –≤—ã—Å–ø–∞–ª—Å—è)\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu"
            )
            
        except Exception as e:
            logger.error(f"Error in checkin data handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin_history(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–∫-–∏–Ω–æ–≤"""
        try:
            user_id = query.from_user.id
            stats = get_user_stats(user_id)
            
            if not stats:
                await query.edit_message_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–æ–≤\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
                    reply_markup=self.menu.get_checkin_menu()
                )
                return
            
            stats_text = "üìä –ò–°–¢–û–†–ò–Ø –í–ê–®–ò–• –ß–ï–ö-–ò–ù–û–í:\n\n"
            for stat in stats:
                date, weight, waist, wellbeing, sleep = stat
                stats_text += f"üìÖ {date[:10]}\n"
                stats_text += f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
                stats_text += f"üìè –¢–∞–ª–∏—è: {waist} —Å–º\n"
                stats_text += f"üòä –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {wellbeing}/5\n"
                stats_text += f"üò¥ –°–æ–Ω: {sleep}/5\n\n"
            
            await query.edit_message_text(
                stats_text,
                reply_markup=self.menu.get_checkin_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in checkin history handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–∫-–∏–Ω–æ–≤",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = query.from_user.id
            stats = get_user_stats(user_id)
            
            if not stats:
                await query.edit_message_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —á–µ–∫-–∏–Ω–æ–≤!",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if len(stats) >= 2:
                latest_weight = stats[0][1]
                oldest_weight = stats[-1][1]
                weight_diff = latest_weight - oldest_weight
                
                progress_text = ""
                if weight_diff < 0:
                    progress_text = f"üìâ –ü–æ—Ç–µ—Ä—è –≤–µ—Å–∞: {abs(weight_diff):.1f} –∫–≥"
                elif weight_diff > 0:
                    progress_text = f"üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞: {weight_diff:.1f} –∫–≥"
                else:
                    progress_text = "‚öñÔ∏è –í–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω"
            else:
                progress_text = "üìà –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –º–∞–ª–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
            
            stats_text = f"üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n{progress_text}\n\n"
            stats_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
            
            for i, stat in enumerate(stats[:5]):
                date, weight, waist, wellbeing, sleep = stat
                stats_text += f"üìÖ {date[:10]}: {weight} –∫–≥, —Ç–∞–ª–∏—è {waist} —Å–º\n"
            
            await query.edit_message_text(
                stats_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in stats handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_my_plan_menu(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –º–æ–µ–≥–æ –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan:
                await query.edit_message_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            user_data = plan.get('user_data', {})
            menu_text = f"üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–û–ú –ü–ò–¢–ê–ù–ò–Ø\n\n"
            menu_text += f"üë§ {user_data.get('gender', '')}, {user_data.get('age', '')} –ª–µ—Ç\n"
            menu_text += f"üìè {user_data.get('height', '')} —Å–º, {user_data.get('weight', '')} –∫–≥\n"
            menu_text += f"üéØ –¶–µ–ª—å: {user_data.get('goal', '')}\n"
            menu_text += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity', '')}\n\n"
            menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            await query.edit_message_text(
                menu_text,
                reply_markup=self.menu.get_plan_management_menu()
            )
        except Exception as e:
            logger.error(f"Error in my plan menu handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–ª–∞–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_plan_info(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö"""
        try:
            user_id = query.from_user.id
            plans_count = get_user_plans_count(user_id)
            days_remaining = get_days_until_next_plan(user_id)
            
            info_text = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–®–ò–• –ü–õ–ê–ù–ê–•\n\n"
            info_text += f"üìã –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–Ω–æ–≤: {plans_count}\n"
            
            if is_admin(user_id):
                info_text += "üëë –°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n"
            else:
                if days_remaining > 0:
                    info_text += f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑: {days_remaining} –¥–Ω–µ–π\n"
                else:
                    info_text += "‚úÖ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω!\n"
            
            info_text += "\nüí° –õ–∏–º–∏—Ç—ã:\n"
            info_text += "‚Ä¢ 1 –ø–ª–∞–Ω –≤ 7 –¥–Ω–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            info_text += "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            
            await query.edit_message_text(
                info_text,
                reply_markup=self.menu.get_plan_management_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in plan info handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_download_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            await self.send_plan_as_file(query, context, user_id)
            
        except Exception as e:
            logger.error(f"Error in download plan handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                reply_markup=self.menu.get_plan_management_menu()
            )
    
    async def _handle_view_week(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
        try:
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            week_text = "üìÖ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ\n\n"
            week_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
            for i, day in enumerate(plan.get('days', [])):
                week_text += f"üìÖ {day['name']}\n"
                week_text += f"üî• {day.get('total_calories', '~1800 –∫–∫–∞–ª')}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                if day.get('meals'):
                    first_meal = day['meals'][0]
                    week_text += f"üçΩ {first_meal['name']}\n"
                
                week_text += "\n"
            
            await query.edit_message_text(
                week_text,
                reply_markup=self.menu.get_week_days_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in view week handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_day_selection(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
        try:
            day_index = int(data.split('_')[1])
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan or day_index >= len(plan.get('days', [])):
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω—è",
                    reply_markup=self.menu.get_week_days_menu()
                )
                return
            
            day = plan['days'][day_index]
            day_text = f"üìÖ {day['name']}\n\n"
            day_text += f"üî• –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {day.get('total_calories', '~1800 –∫–∫–∞–ª')}\n\n"
            day_text += "üçΩ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏:\n\n"
            
            for i, meal in enumerate(day.get('meals', [])):
                day_text += f"{meal['emoji']} {meal['type']} ({meal['time']})\n"
                day_text += f"   {meal['name']} - {meal['calories']}\n\n"
            
            day_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
            
            await query.edit_message_text(
                day_text,
                reply_markup=self.menu.get_day_meals_menu(day_index)
            )
            
        except Exception as e:
            logger.error(f"Error in day selection handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω—è",
                reply_markup=self.menu.get_week_days_menu()
            )
    
    async def _handle_meal_selection(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        try:
            parts = data.split('_')
            day_index = int(parts[1])
            meal_index = int(parts[2])
            
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan or day_index >= len(plan.get('days', [])):
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
                    reply_markup=self.menu.get_week_days_menu()
                )
                return
            
            day = plan['days'][day_index]
            if meal_index >= len(day.get('meals', [])):
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
                    reply_markup=self.menu.get_day_meals_menu(day_index)
                )
                return
            
            meal = day['meals'][meal_index]
            meal_text = f"üçΩ {meal['type']} - {day['name']}\n\n"
            meal_text += f"üïê –í—Ä–µ–º—è: {meal['time']}\n"
            meal_text += f"üìù –ë–ª—é–¥–æ: {meal['name']}\n"
            meal_text += f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {meal['calories']}\n"
            meal_text += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal['cooking_time']}\n\n"
            
            meal_text += "üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
            meal_text += f"{meal['ingredients']}\n\n"
            
            meal_text += "üë©‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n"
            meal_text += f"{meal['instructions']}"
            
            await query.edit_message_text(
                meal_text,
                reply_markup=self.menu.get_meal_detail_menu(day_index, meal_index)
            )
            
        except Exception as e:
            logger.error(f"Error in meal selection handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
                reply_markup=self.menu.get_week_days_menu()
            )
    
    async def _handle_next_meal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏"""
        try:
            parts = data.split('_')
            day_index = int(parts[2])
            meal_index = int(parts[3])
            
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏
            next_meal_index = meal_index + 1
            next_day_index = day_index
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
            if next_meal_index >= len(plan['days'][day_index].get('meals', [])):
                next_meal_index = 0
                next_day_index += 1
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É
            if next_day_index >= len(plan.get('days', [])):
                next_day_index = 0
            
            # –°–æ–∑–¥–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            next_callback = f"meal_{next_day_index}_{next_meal_index}"
            await self._handle_meal_selection(query, context, next_callback)
            
        except Exception as e:
            logger.error(f"Error in next meal handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏",
                reply_markup=self.menu.get_week_days_menu()
            )
    
    async def _handle_shopping_cart(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫"""
        try:
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            shopping_list = self._generate_shopping_list(plan)
            
            cart_text = "üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö –ù–ê –ù–ï–î–ï–õ–Æ\n\n"
            cart_text += "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
            cart_text += shopping_list
            
            await query.edit_message_text(
                cart_text,
                reply_markup=self.menu.get_shopping_cart_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in shopping cart handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫",
                reply_markup=self.menu.get_main_menu()
            )
    
    def _generate_shopping_list(self, plan):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            all_ingredients = []
            
            for day in plan.get('days', []):
                for meal in day.get('meals', []):
                    ingredients = meal.get('ingredients', '')
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                    lines = ingredients.split('\n')
                    for line in lines:
                        line = line.strip()
                        if line and line.startswith('‚Ä¢'):
                            all_ingredients.append(line[1:].strip())
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            unique_ingredients = sorted(list(set(all_ingredients)))
            
            if not unique_ingredients:
                return "‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥\n‚Ä¢ –†—ã–±–∞ –±–µ–ª–∞—è - 600–≥\n‚Ä¢ –û–≤–æ—â–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ - 2–∫–≥\n‚Ä¢ –§—Ä—É–∫—Ç—ã - 1.5–∫–≥\n‚Ä¢ –ö—Ä—É–ø—ã - 1–∫–≥\n‚Ä¢ –Ø–π—Ü–∞ - 10—à—Ç\n‚Ä¢ –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - 1–∫–≥"
            
            return '\n'.join([f"‚Ä¢ {ingredient}" for ingredient in unique_ingredients[:20]])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            
        except Exception as e:
            logger.error(f"Error generating shopping list: {e}")
            return "‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥\n‚Ä¢ –†—ã–±–∞ –±–µ–ª–∞—è - 600–≥\n‚Ä¢ –û–≤–æ—â–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ - 2–∫–≥\n‚Ä¢ –§—Ä—É–∫—Ç—ã - 1.5–∫–≥\n‚Ä¢ –ö—Ä—É–ø—ã - 1–∫–≥\n‚Ä¢ –Ø–π—Ü–∞ - 10—à—Ç\n‚Ä¢ –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - 1–∫–≥"
    
    async def _handle_download_shopping_list(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        try:
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            shopping_list = self._generate_shopping_list(plan)
            filename = f"shopping_list_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("üõí –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö –ù–ê –ù–ï–î–ï–õ–Æ\n\n")
                f.write("üìã –ü—Ä–æ–¥—É–∫—Ç—ã:\n\n")
                f.write(shopping_list)
                f.write("\n\nüí° –°–æ–≤–µ—Ç—ã:\n")
                f.write("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é\n")
            
            with open(filename, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename=f"–°–ø–∏—Å–æ–∫_–ø–æ–∫—É–ø–æ–∫_{user_id}.txt",
                    caption="üìÑ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é"
                )
            
            await query.edit_message_text(
                "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞!",
                reply_markup=self.menu.get_shopping_cart_menu()
            )
            
            import os
            os.remove(filename)
            
        except Exception as e:
            logger.error(f"Error in download shopping list handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫",
                reply_markup=self.menu.get_shopping_cart_menu()
            )
    
    async def _handle_help(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        help_text = """
ü§ñ –°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£ –ü–ò–¢–ê–ù–ò–Ø

üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù:
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ 1 –ø–ª–∞–Ω –≤ 7 –¥–Ω–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìà –ß–ï–ö-–ò–ù:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –í–µ—Å, –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Å–æ–Ω
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üìã –ú–û–ô –ü–õ–ê–ù:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–Ω—è–º –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
‚Ä¢ –°–∫–∞—á–∏–≤–∞–π—Ç–µ –ø–ª–∞–Ω –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ

üí° –°–û–í–ï–¢–´:
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –≤–Ω–æ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–∏–Ω–∞
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.
"""
        await query.edit_message_text(
            help_text,
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            text = update.message.text
            
            if 'awaiting_input' in context.user_data:
                input_type = context.user_data['awaiting_input']
                
                if input_type == 'plan_details':
                    await self._process_plan_details(update, context, text)
                elif input_type == 'checkin_data':
                    await self._process_checkin_data(update, context, text)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu",
                        reply_markup=self.menu.get_main_menu()
                    )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                context.user_data.pop('awaiting_input', None)
            else:
                await update.message.reply_text(
                    "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            logger.error(f"Error in message handler: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_plan_details(self, update, context, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞–Ω–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 3:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n–ü—Ä–∏–º–µ—Ä: 30, 180, 75",
                    reply_markup=self.menu.get_back_menu()
                )
                return
            
            age = int(parts[0])
            height = int(parts[1])
            weight = float(parts[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['plan_data'].update({
                'age': age,
                'height': height,
                'weight': weight
            })
            
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞–µ–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan = await self._generate_nutrition_plan(context.user_data['plan_data'])
            
            if plan:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î
                plan_id = save_plan(update.effective_user.id, plan)
                update_user_limit(update.effective_user.id)
                
                if plan_id:
                    await update.message.reply_text(
                        "‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ú–æ–π –ø–ª–∞–Ω' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
                        reply_markup=self.menu.get_main_menu()
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞",
                        reply_markup=self.menu.get_main_menu()
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: 30, 180, 75",
                reply_markup=self.menu.get_back_menu()
            )
        except Exception as e:
            logger.error(f"Error processing plan details: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_checkin_data(self, update, context, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 4:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –í–µ—Å, –¢–∞–ª–∏—è, –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –°–æ–Ω\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3"
                )
                return
            
            weight = float(parts[0])
            waist = int(parts[1])
            wellbeing = int(parts[2])
            sleep = int(parts[3])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if not (1 <= wellbeing <= 5) or not (1 <= sleep <= 5):
                await update.message.reply_text(
                    "‚ùå –û—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 5\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫-–∏–Ω
            save_checkin(update.effective_user.id, weight, waist, wellbeing, sleep)
            
            await update.message.reply_text(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —á–µ–∫-–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üí™",
                reply_markup=self.menu.get_checkin_menu()
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3"
            )
        except Exception as e:
            logger.error(f"Error processing checkin data: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _generate_nutrition_plan(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            # –ï—Å–ª–∏ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
                return self._generate_demo_plan(user_data)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex GPT API
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            return self._generate_demo_plan(user_data)
            
        except Exception as e:
            logger.error(f"Error generating nutrition plan: {e}")
            return self._generate_demo_plan(user_data)
    
    def _generate_demo_plan(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
        days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        meals_structure = [
            {'type': '–ó–ê–í–¢–†–ê–ö', 'time': '08:00', 'emoji': 'üç≥'},
            {'type': '–ü–ï–†–ï–ö–£–° 1', 'time': '11:00', 'emoji': 'ü•ó'},
            {'type': '–û–ë–ï–î', 'time': '14:00', 'emoji': 'üç≤'},
            {'type': '–ü–ï–†–ï–ö–£–° 2', 'time': '17:00', 'emoji': 'üçé'},
            {'type': '–£–ñ–ò–ù', 'time': '20:00', 'emoji': 'üçõ'}
        ]
        
        demo_meals = [
            {
                'name': '–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏',
                'calories': '350 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 200–º–ª\n‚Ä¢ –Ø–≥–æ–¥—ã —Å–≤–µ–∂–∏–µ - 100–≥\n‚Ä¢ –û—Ä–µ—Ö–∏ –≥—Ä–µ—Ü–∫–∏–µ - 20–≥\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.',
                'instructions': '1. –°–≤–∞—Ä–∏—Ç–µ –æ–≤—Å—è–Ω–∫—É –Ω–∞ –º–æ–ª–æ–∫–µ\n2. –î–æ–±–∞–≤—å—Ç–µ —è–≥–æ–¥—ã –∏ –æ—Ä–µ—Ö–∏\n3. –ü–æ–ª–µ–π—Ç–µ –º–µ–¥–æ–º',
                'cooking_time': '15 –º–∏–Ω'
            },
            {
                'name': '–¢–≤–æ—Ä–æ–≥ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                'calories': '200 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π - 150–≥\n‚Ä¢ –Ø–±–ª–æ–∫–æ - 1 —à—Ç\n‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - —â–µ–ø–æ—Ç–∫–∞',
                'instructions': '1. –ù–∞—Ä–µ–∂—å—Ç–µ —è–±–ª–æ–∫–æ –∫—É–±–∏–∫–∞–º–∏\n2. –°–º–µ—à–∞–π—Ç–µ —Å —Ç–≤–æ—Ä–æ–≥–æ–º\n3. –ü–æ—Å—ã–ø—å—Ç–µ –∫–æ—Ä–∏—Ü–µ–π',
                'cooking_time': '5 –º–∏–Ω'
            },
            {
                'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π –∏ –æ–≤–æ—â–∞–º–∏',
                'calories': '450 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ì—Ä–µ—á–∫–∞ - 100–≥\n‚Ä¢ –û–≤–æ—â–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 200–≥\n‚Ä¢ –ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 1 —Å—Ç.–ª.',
                'instructions': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –û–±–∂–∞—Ä—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n3. –ü–æ—Ç—É—à–∏—Ç–µ –æ–≤–æ—â–∏\n4. –ü–æ–¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ',
                'cooking_time': '25 –º–∏–Ω'
            },
            {
                'name': '–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏',
                'calories': '180 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç - 150–≥\n‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 30–≥\n‚Ä¢ –Ø–≥–æ–¥—ã —Å—É—à–µ–Ω—ã–µ - 20–≥',
                'instructions': '1. –°–º–µ—à–∞–π—Ç–µ –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏\n2. –î–æ–±–∞–≤—å—Ç–µ —Å—É—à–µ–Ω—ã–µ —è–≥–æ–¥—ã',
                'cooking_time': '2 –º–∏–Ω'
            },
            {
                'name': '–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É —Å –±—Ä–æ–∫–∫–æ–ª–∏',
                'calories': '400 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –§–∏–ª–µ –±–µ–ª–æ–π —Ä—ã–±—ã - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 200–≥\n‚Ä¢ –õ–∏–º–æ–Ω - 1 –¥–æ–ª—å–∫–∞\n‚Ä¢ –°–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É',
                'instructions': '1. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Ä—ã–±—É –Ω–∞ –ø–∞—Ä—É\n2. –û—Ç–≤–∞—Ä–∏—Ç–µ –±—Ä–æ–∫–∫–æ–ª–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–∏–º–æ–Ω–æ–º',
                'cooking_time': '20 –º–∏–Ω'
            }
        ]
        
        plan = {
            'user_data': user_data,
            'days': []
        }
        
        for i, day_name in enumerate(days):
            day_plan = {
                'name': day_name,
                'total_calories': '~1800 –∫–∫–∞–ª',
                'meals': []
            }
            
            for j, meal_struct in enumerate(meals_structure):
                meal = demo_meals[j].copy()
                meal.update(meal_struct)
                day_plan['meals'].append(meal)
            
            plan['days'].append(day_plan)
        
        return plan
    
    async def send_plan_as_file(self, update, context, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞"""
        try:
            plan = get_latest_plan(user_id)
            if not plan:
                if hasattr(update, 'message'):
                    await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è")
                else:
                    await update.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è")
                return
            
            filename = f"nutrition_plan_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("üçé –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø\n\n")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_data = plan.get('user_data', {})
                f.write("üë§ –í–ê–®–ò –î–ê–ù–ù–´–ï:\n")
                f.write(f"–ü–æ–ª: {user_data.get('gender', '')}\n")
                f.write(f"–í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '')} –ª–µ—Ç\n")
                f.write(f"–†–æ—Å—Ç: {user_data.get('height', '')} —Å–º\n")
                f.write(f"–í–µ—Å: {user_data.get('weight', '')} –∫–≥\n")
                f.write(f"–¶–µ–ª—å: {user_data.get('goal', '')}\n")
                f.write(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity', '')}\n\n")
                
                # –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
                f.write("üìÖ –ü–õ–ê–ù –ù–ê –ù–ï–î–ï–õ–Æ:\n\n")
                
                for day in plan.get('days', []):
                    f.write(f"=== {day['name']} ===\n")
                    f.write(f"–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {day.get('total_calories', '~1800 –∫–∫–∞–ª')}\n\n")
                    
                    for meal in day.get('meals', []):
                        f.write(f"{meal['emoji']} {meal['type']} ({meal['time']})\n")
                        f.write(f"–ë–ª—é–¥–æ: {meal['name']}\n")
                        f.write(f"–ö–∞–ª–æ—Ä–∏–∏: {meal['calories']}\n")
                        f.write(f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal['cooking_time']}\n")
                        f.write("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n")
                        f.write(f"{meal['ingredients']}\n")
                        f.write("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n")
                        f.write(f"{meal['instructions']}\n")
                        f.write("-" * 40 + "\n\n")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(filename, 'rb') as file:
                if hasattr(update, 'message'):
                    await update.message.reply_document(
                        document=file,
                        filename=f"–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_{user_id}.txt",
                        caption="üìÑ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"
                    )
                else:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=file,
                        filename=f"–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_{user_id}.txt",
                        caption="üìÑ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"
                    )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            os.remove(filename)
            
            if not hasattr(update, 'message'):
                await update.edit_message_text("‚úÖ –ü–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞!")
                
        except Exception as e:
            logger.error(f"Error sending plan as file: {e}")
            if hasattr(update, 'message'):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–ª–∞–Ω–∞")
            else:
                await update.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–ª–∞–Ω–∞")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = NutritionBot()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_flask():
            app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info("‚úÖ Flask server started on port 5000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ Starting bot polling...")
        bot.application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start bot: {e}")
        sys.exit(1)

if __name__ == '__main__':
    run_bot()
