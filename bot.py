import os
import logging
import threading
import sqlite3
import json
import requests
import sys
from datetime import datetime
from flask import Flask, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

ADMIN_USER_ID = 362423055
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('PRAGMA journal_mode=WAL')
    cursor.execute('PRAGMA synchronous=NORMAL')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS nutrition_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_checkins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            weight REAL,
            waist_circumference INTEGER,
            wellbeing_score INTEGER,
            sleep_quality INTEGER,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_limits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            last_plan_date TIMESTAMP,
            plan_count INTEGER DEFAULT 0
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['user_id'], user_data['username'], user_data['first_name'], user_data['last_name']))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving user: {e}")
    finally:
        conn.close()

def is_admin(user_id):
    return user_id == ADMIN_USER_ID

def can_make_request(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return True
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return True
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_since_last_plan = (datetime.now() - last_plan_date).days
        
        conn.close()
        return days_since_last_plan >= 7
        
    except Exception as e:
        logger.error(f"Error checking request limit: {e}")
        return True

def update_user_limit(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        cursor.execute('''
            INSERT OR REPLACE INTO user_limits (user_id, last_plan_date, plan_count)
            VALUES (?, ?, COALESCE((SELECT plan_count FROM user_limits WHERE user_id = ?), 0) + 1)
        ''', (user_id, current_time, user_id))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error updating user limits: {e}")

def get_days_until_next_plan(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return 0
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return 0
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_passed = (datetime.now() - last_plan_date).days
        days_remaining = 7 - days_passed
        
        conn.close()
        return max(0, days_remaining)
        
    except Exception as e:
        logger.error(f"Error getting days until next plan: {e}")
        return 0

def save_plan(user_id, plan_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO nutrition_plans (user_id, plan_data) VALUES (?, ?)', 
                      (user_id, json.dumps(plan_data)))
        plan_id = cursor.lastrowid
        conn.commit()
        return plan_id
    except Exception as e:
        logger.error(f"Error saving plan: {e}")
        return None
    finally:
        conn.close()

def save_checkin(user_id, weight, waist, wellbeing, sleep):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO daily_checkins (user_id, weight, waist_circumference, wellbeing_score, sleep_quality)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, weight, waist, wellbeing, sleep))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving checkin: {e}")
    finally:
        conn.close()

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT date, weight, waist_circumference, wellbeing_score, sleep_quality
            FROM daily_checkins WHERE user_id = ? ORDER BY date DESC LIMIT 7
        ''', (user_id,))
        checkins = cursor.fetchall()
        return checkins
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return []
    finally:
        conn.close()

def get_latest_plan(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT plan_data FROM nutrition_plans 
            WHERE user_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (user_id,))
        result = cursor.fetchone()
        return json.loads(result[0]) if result else None
    except Exception as e:
        logger.error(f"Error getting latest plan: {e}")
        return None
    finally:
        conn.close()

# ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ ====================

class InteractiveMenu:
    def __init__(self):
        self.days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        self.meals = ['–ó–ê–í–¢–†–ê–ö', '–ü–ï–†–ï–ö–£–° 1', '–û–ë–ï–î', '–ü–ï–†–ï–ö–£–° 2', '–£–ñ–ò–ù']
    
    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù", callback_data="create_plan")],
            [InlineKeyboardButton("üìà –ß–ï–ö-–ò–ù", callback_data="checkin")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
            [InlineKeyboardButton("üìã –ú–û–ô –ü–õ–ê–ù", callback_data="my_plan")],
            [InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_data_input(self, step=1):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
        if step == 1:  # –í—ã–±–æ—Ä –ø–æ–ª–∞
            keyboard = [
                [InlineKeyboardButton("üë® –ú–£–ñ–ß–ò–ù–ê", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–ï–ù–©–ò–ù–ê", callback_data="gender_female")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        elif step == 2:  # –í—ã–±–æ—Ä —Ü–µ–ª–∏
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–û–•–£–î–ï–ù–ò–ï", callback_data="goal_weight_loss")],
                [InlineKeyboardButton("üí™ –ù–ê–ë–û–† –ú–ê–°–°–´", callback_data="goal_mass")],
                [InlineKeyboardButton("‚öñÔ∏è –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï", callback_data="goal_maintain")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_gender")]
            ]
        elif step == 3:  # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í–´–°–û–ö–ê–Ø", callback_data="activity_high")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–†–ï–î–ù–Ø–Ø", callback_data="activity_medium")],
                [InlineKeyboardButton("üí§ –ù–ò–ó–ö–ê–Ø", callback_data="activity_low")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_goal")]
            ]
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_checkin_menu(self):
        """–ú–µ–Ω—é –¥–ª—è —á–µ–∫-–∏–Ω–∞"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–ê–ü–ò–°–ê–¢–¨ –î–ê–ù–ù–´–ï", callback_data="checkin_data")],
            [InlineKeyboardButton("üìä –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–°–¢–û–†–ò–Æ", callback_data="checkin_history")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_back_menu(self):
        """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

# ==================== FLASK APP ====================

app = Flask(__name__)

@app.route('/')
def home():
    return """
    <h1>ü§ñ Nutrition Bot is Running!</h1>
    <p>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
    <p><a href="/health">Health Check</a></p>
    <p>üïí Last update: {}</p>
    """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

@app.route('/health')
def health_check():
    return jsonify({
        "status": "healthy", 
        "service": "nutrition-bot",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0"
    })

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================

class NutritionBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN not found")
            raise ValueError("BOT_TOKEN is required")
            
        init_database()
        
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ 21.7
            self.application = Application.builder().token(self.bot_token).build()
            self.menu = InteractiveMenu()
            self._setup_handlers()
            
            logger.info("‚úÖ Bot initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }
            save_user(user_data)
            
            welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Å AI!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
            if is_admin(user.id):
                welcome_text += "\nüëë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∞–º!"
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        logger.info(f"üì® Callback received: {data}")
        
        try:
            # –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
            if data == "create_plan":
                await self._handle_create_plan(query, context)
            elif data == "checkin":
                await self._handle_checkin_menu(query, context)
            elif data == "stats":
                await self._handle_stats(query, context)
            elif data == "my_plan":
                await self._handle_my_plan(query, context)
            elif data == "help":
                await self._handle_help(query, context)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
            elif data == "back_main":
                await self._show_main_menu(query)
            elif data == "back_gender":
                await self._handle_gender_back(query, context)
            elif data == "back_goal":
                await self._handle_goal_back(query, context)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
            elif data.startswith("gender_"):
                await self._handle_gender(query, context, data)
            elif data.startswith("goal_"):
                await self._handle_goal(query, context, data)
            elif data.startswith("activity_"):
                await self._handle_activity(query, context, data)
            
            # –ß–µ–∫-–∏–Ω
            elif data == "checkin_data":
                await self._handle_checkin_data(query, context)
            elif data == "checkin_history":
                await self._handle_checkin_history(query, context)
            
            else:
                logger.warning(f"‚ö†Ô∏è Unknown callback data: {data}")
                await query.edit_message_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error in callback handler: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_create_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not is_admin(user_id) and not can_make_request(user_id):
                days_remaining = get_days_until_next_plan(user_id)
                await query.edit_message_text(
                    f"‚è≥ –í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n–°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
            context.user_data['plan_data'] = {}
            context.user_data['plan_step'] = 1
            
            logger.info(f"üîß Starting plan creation for user {user_id}")
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in create plan handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
        try:
            context.user_data['plan_step'] = 1
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
        except Exception as e:
            logger.error(f"‚ùå Error in gender back handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_goal_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏"""
        try:
            context.user_data['plan_step'] = 2
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=self.menu.get_plan_data_input(step=2)
            )
        except Exception as e:
            logger.error(f"‚ùå Error in goal back handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        try:
            gender_map = {
                "gender_male": "–ú–£–ñ–ß–ò–ù–ê",
                "gender_female": "–ñ–ï–ù–©–ò–ù–ê"
            }
            
            context.user_data['plan_data']['gender'] = gender_map[data]
            context.user_data['plan_step'] = 2
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=self.menu.get_plan_data_input(step=2)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in gender handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_goal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
        try:
            goal_map = {
                "goal_weight_loss": "–ü–û–•–£–î–ï–ù–ò–ï",
                "goal_mass": "–ù–ê–ë–û–† –ú–ê–°–°–´", 
                "goal_maintain": "–ü–û–î–î–ï–†–ñ–ê–ù–ò–ï"
            }
            
            context.user_data['plan_data']['goal'] = goal_map[data]
            context.user_data['plan_step'] = 3
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=self.menu.get_plan_data_input(step=3)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in goal handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_activity(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            activity_map = {
                "activity_high": "–í–´–°–û–ö–ê–Ø",
                "activity_medium": "–°–†–ï–î–ù–Ø–Ø",
                "activity_low": "–ù–ò–ó–ö–ê–Ø"
            }
            
            context.user_data['plan_data']['activity'] = activity_map[data]
            context.user_data['awaiting_input'] = 'plan_details'
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 30, 180, 75\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu",
                reply_markup=self.menu.get_back_menu()
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in activity handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin_menu(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —á–µ–∫-–∏–Ω–∞"""
        try:
            await query.edit_message_text(
                "üìà –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ß–ï–ö-–ò–ù\n\n"
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
                "‚Ä¢ –í–µ—Å\n"
                "‚Ä¢ –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏\n"
                "‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n"
                "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.menu.get_checkin_menu()
            )
        except Exception as e:
            logger.error(f"Error in checkin menu handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–µ–∫-–∏–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin_data(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞"""
        try:
            context.user_data['awaiting_input'] = 'checkin_data'
            
            await query.edit_message_text(
                "üìù –í–í–ï–î–ò–¢–ï –î–ê–ù–ù–´–ï –ß–ï–ö-–ò–ù–ê\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–í–µ—Å (–∫–≥), –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º), –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ (1-5), –°–æ–Ω (1-5)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3\n\n"
                "üìä –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫:\n"
                "‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: 1(–ø–ª–æ—Ö–æ) - 5(–æ—Ç–ª–∏—á–Ω–æ)\n"
                "‚Ä¢ –°–æ–Ω: 1(–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞) - 5(–æ—Ç–ª–∏—á–Ω–æ –≤—ã—Å–ø–∞–ª—Å—è)\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu"
            )
            
        except Exception as e:
            logger.error(f"Error in checkin data handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin_history(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–∫-–∏–Ω–æ–≤"""
        try:
            user_id = query.from_user.id
            stats = get_user_stats(user_id)
            
            if not stats:
                await query.edit_message_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–æ–≤\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
                    reply_markup=self.menu.get_checkin_menu()
                )
                return
            
            stats_text = "üìä –ò–°–¢–û–†–ò–Ø –í–ê–®–ò–• –ß–ï–ö-–ò–ù–û–í:\n\n"
            for stat in stats:
                date, weight, waist, wellbeing, sleep = stat
                stats_text += f"üìÖ {date[:10]}\n"
                stats_text += f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
                stats_text += f"üìè –¢–∞–ª–∏—è: {waist} —Å–º\n"
                stats_text += f"üòä –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {wellbeing}/5\n"
                stats_text += f"üò¥ –°–æ–Ω: {sleep}/5\n\n"
            
            await query.edit_message_text(
                stats_text,
                reply_markup=self.menu.get_checkin_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in checkin history handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–∫-–∏–Ω–æ–≤",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = query.from_user.id
            stats = get_user_stats(user_id)
            
            if not stats:
                await query.edit_message_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —á–µ–∫-–∏–Ω–æ–≤!",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if len(stats) >= 2:
                latest_weight = stats[0][1]
                oldest_weight = stats[-1][1]
                weight_diff = latest_weight - oldest_weight
                
                progress_text = ""
                if weight_diff < 0:
                    progress_text = f"üìâ –ü–æ—Ç–µ—Ä—è –≤–µ—Å–∞: {abs(weight_diff):.1f} –∫–≥"
                elif weight_diff > 0:
                    progress_text = f"üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞: {weight_diff:.1f} –∫–≥"
                else:
                    progress_text = "‚öñÔ∏è –í–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω"
            else:
                progress_text = "üìà –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –º–∞–ª–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
            
            stats_text = f"üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n{progress_text}\n\n"
            stats_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
            
            for i, stat in enumerate(stats[:5]):
                date, weight, waist, wellbeing, sleep = stat
                stats_text += f"üìÖ {date[:10]}: {weight} –∫–≥, —Ç–∞–ª–∏—è {waist} —Å–º\n"
            
            await query.edit_message_text(
                stats_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in stats handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_my_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            plan = get_latest_plan(user_id)
            
            if not plan:
                await query.edit_message_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            user_data = plan.get('user_data', {})
            plan_text = f"üìã –í–ê–® –¢–ï–ö–£–©–ò–ô –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø\n\n"
            plan_text += f"üë§ {user_data.get('gender', '')}, {user_data.get('age', '')} –ª–µ—Ç\n"
            plan_text += f"üìè {user_data.get('height', '')} —Å–º, {user_data.get('weight', '')} –∫–≥\n"
            plan_text += f"üéØ –¶–µ–ª—å: {user_data.get('goal', '')}\n"
            plan_text += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity', '')}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–ª–∞–Ω–∞
            if plan.get('days'):
                first_day = plan['days'][0]
                plan_text += f"üìÖ {first_day['name']}:\n"
                for meal in first_day.get('meals', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                    plan_text += f"{meal['emoji']} {meal['time']} - {meal['name']}\n"
                plan_text += f"\nüçΩÔ∏è –í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: 5 –≤ –¥–µ–Ω—å"
            
            plan_text += f"\n\nüíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ:\n{plan.get('water_regime', '1.5-2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å')}"
            
            await query.edit_message_text(
                plan_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in my_plan handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_help(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        help_text = """
‚ùì –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£

üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù:
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à –ø–æ–ª, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π (–∞–¥–º–∏–Ω–∞–º - –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ)

üìà –ß–ï–ö-–ò–ù:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ó–∞–ø–∏—Å—å –≤–µ—Å–∞, –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞  
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

üìã –ú–û–ô –ü–õ–ê–ù:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ —á–µ–∫-–∏–Ω
‚Ä¢ –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
"""
        await query.edit_message_text(
            help_text,
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            user_id = update.effective_user.id
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
            if text == "/menu":
                await update.message.reply_text(
                    "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            if context.user_data.get('awaiting_input') == 'plan_details':
                await self._process_plan_details(update, context, text)
            elif context.user_data.get('awaiting_input') == 'checkin_data':
                await self._process_checkin_data(update, context, text)
            else:
                await update.message.reply_text(
                    "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            logger.error(f"Error in message handler: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_plan_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 3:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            
            age, height, weight = int(parts[0]), int(parts[1]), float(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not (10 <= age <= 100):
                raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç")
            if not (100 <= height <= 250):
                raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")
            if not (30 <= weight <= 300):
                raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
            
            user_data = {
                **context.user_data['plan_data'],
                'age': age,
                'height': height,
                'weight': weight,
                'user_id': update.effective_user.id,
                'username': update.effective_user.username
            }
            
            logger.info(f"üéØ Generating plan for: {user_data}")
            
            processing_msg = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à AI-–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan_data = await self._generate_plan_with_gpt(user_data)
            if plan_data:
                plan_id = save_plan(user_data['user_id'], plan_data)
                update_user_limit(user_data['user_id'])
                
                await processing_msg.delete()
                
                success_text = f"""
üéâ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ì–û–¢–û–í!

üë§ –î–∞–Ω–Ω—ã–µ: {user_data['gender']}, {age} –ª–µ—Ç, {height} —Å–º, {weight} –∫–≥
üéØ –¶–µ–ª—å: {user_data['goal']}
üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['activity']}

üìã –ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ 7 –¥–Ω–µ–π –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å  
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ

–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–û–ô –ü–õ–ê–ù" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
"""
                await update.message.reply_text(
                    success_text,
                    reply_markup=self.menu.get_main_menu()
                )
                
                logger.info(f"‚úÖ Plan successfully created for user {user_data['user_id']}")
                
            else:
                await processing_msg.delete()
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['awaiting_input'] = None
            context.user_data['plan_data'] = {}
            context.user_data['plan_step'] = None
            
        except ValueError as e:
            error_msg = str(e)
            if "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞" in error_msg:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç, –í–µ—Å\n–ü—Ä–∏–º–µ—Ä: 30, 180, 80\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
        except Exception as e:
            logger.error(f"‚ùå Error processing plan details: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_checkin_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–∏–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 4:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            
            weight, waist, wellbeing, sleep = float(parts[0]), int(parts[1]), int(parts[2]), int(parts[3])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not (30 <= weight <= 300):
                raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
            if not (50 <= waist <= 200):
                raise ValueError("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 200 —Å–º")
            if not (1 <= wellbeing <= 5):
                raise ValueError("–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            if not (1 <= sleep <= 5):
                raise ValueError("–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            
            user_id = update.effective_user.id
            save_checkin(user_id, weight, waist, wellbeing, sleep)
            
            success_text = f"""
‚úÖ –î–ê–ù–ù–´–ï –ß–ï–ö-–ò–ù–ê –°–û–•–†–ê–ù–ï–ù–´!

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}
‚öñÔ∏è –í–µ—Å: {weight} –∫–≥
üìè –¢–∞–ª–∏—è: {waist} —Å–º
üòä –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {wellbeing}/5
üò¥ –°–æ–Ω: {sleep}/5

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å!
"""
            await update.message.reply_text(
                success_text,
                reply_markup=self.menu.get_main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['awaiting_input'] = None
            
        except ValueError as e:
            error_msg = str(e)
            if "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 4 –∑–Ω–∞—á–µ–Ω–∏—è" in error_msg:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–µ—Å, –¢–∞–ª–∏—è, –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –°–æ–Ω\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
        except Exception as e:
            logger.error(f"‚ùå Error processing checkin data: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫-–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _generate_plan_with_gpt(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Yandex GPT"""
        try:
            prompt = self._create_prompt(user_data)
            
            headers = {
                "Authorization": f"Api-Key {YANDEX_API_KEY}",
                "Content-Type": "application/json"
            }
            
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": 4000
                },
                "messages": [
                    {
                        "role": "system",
                        "text": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π."
                    },
                    {
                        "role": "user", 
                        "text": prompt
                    }
                ]
            }
            
            logger.info("üöÄ Sending request to Yandex GPT...")
            response = requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=60)
            
            if response.status_code == 200:
                result = response.json()
                gpt_response = result['result']['alternatives'][0]['message']['text']
                logger.info("‚úÖ GPT response received successfully")
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
                structured_plan = self._parse_gpt_response(gpt_response, user_data)
                return structured_plan
            else:
                logger.error(f"‚ùå GPT API error: {response.status_code} - {response.text}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø–ª–∞–Ω
                return self._generate_fallback_plan(user_data)
                
        except Exception as e:
            logger.error(f"‚ùå Error generating plan with GPT: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø–ª–∞–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._generate_fallback_plan(user_data)
    
    def _create_prompt(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT"""
        gender = user_data['gender']
        goal = user_data['goal']
        activity = user_data['activity']
        age = user_data['age']
        height = user_data['height']
        weight = user_data['weight']
        
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è:

–ü–æ–ª: {gender}
–¶–µ–ª—å: {goal}
–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}
–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
–†–æ—Å—Ç: {height} —Å–º
–í–µ—Å: {weight} –∫–≥

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–ª–∞–Ω—É:
1. 7 –¥–Ω–µ–π (–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö - –í–û–°–ö–†–ï–°–ï–ù–¨–ï)
2. 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å: –ó–ê–í–¢–†–ê–ö, –ü–ï–†–ï–ö–£–° 1, –û–ë–ï–î, –ü–ï–†–ï–ö–£–° 2, –£–ñ–ò–ù
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
   - –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8:00)
   - –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
   - –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –∫–∫–∞–ª
   - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
   - –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
   - –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

4. –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
   - –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É
   - –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–ª—å ({goal}).
–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —á–µ—Ç–∫–æ –ø–æ –¥–Ω—è–º –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏.
"""
        return prompt
    
    def _parse_gpt_response(self, gpt_response, user_data):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GPT –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            plan = {
                'user_data': user_data,
                'days': [],
                'shopping_list': "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞",
                'water_regime': "1.5-2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å",
                'general_recommendations': "–°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã",
                'created_at': datetime.now().isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–Ω–µ–π
            day_names = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
            
            for day_name in day_names:
                day = {
                    'name': day_name,
                    'meals': [
                        {
                            'type': '–ó–ê–í–¢–†–ê–ö',
                            'emoji': 'üç≥',
                            'name': '–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                            'time': '8:00',
                            'calories': '350 –∫–∫–∞–ª',
                            'ingredients': '‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 60–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 150–º–ª\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.',
                            'instructions': '1. –í–∞—Ä–∏—Ç–µ –æ–≤—Å—è–Ω–∫—É 10 –º–∏–Ω—É—Ç\n2. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ –º–µ–¥\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Ç–µ–ø–ª—ã–º',
                            'cooking_time': '15 –º–∏–Ω—É—Ç'
                        },
                        {
                            'type': '–ü–ï–†–ï–ö–£–° 1',
                            'emoji': 'ü•ó',
                            'name': '–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏',
                            'time': '11:00',
                            'calories': '250 –∫–∫–∞–ª',
                            'ingredients': '‚Ä¢ –ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 150–≥\n‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30–≥\n‚Ä¢ –Ø–≥–æ–¥—ã - 50–≥',
                            'instructions': '1. –°–º–µ—à–∞–π—Ç–µ –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏\n2. –î–æ–±–∞–≤—å—Ç–µ —è–≥–æ–¥—ã\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º',
                            'cooking_time': '5 –º–∏–Ω—É—Ç'
                        },
                        {
                            'type': '–û–ë–ï–î',
                            'emoji': 'üç≤',
                            'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π',
                            'time': '13:00',
                            'calories': '450 –∫–∫–∞–ª',
                            'ingredients': '‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ì—Ä–µ—á–∫–∞ - 80–≥\n‚Ä¢ –û–≥—É—Ä—Ü—ã - 100–≥\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 100–≥',
                            'instructions': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏',
                            'cooking_time': '25 –º–∏–Ω—É—Ç'
                        },
                        {
                            'type': '–ü–ï–†–ï–ö–£–° 2',
                            'emoji': 'üçé',
                            'name': '–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç',
                            'time': '16:00',
                            'calories': '200 –∫–∫–∞–ª',
                            'ingredients': '‚Ä¢ –Ø–±–ª–æ–∫–æ - 1 —à—Ç\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ê–ø–µ–ª—å—Å–∏–Ω - 1 —à—Ç\n‚Ä¢ –ô–æ–≥—É—Ä—Ç - 50–≥',
                            'instructions': '1. –ù–∞—Ä–µ–∂—å—Ç–µ —Ñ—Ä—É–∫—Ç—ã\n2. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –π–æ–≥—É—Ä—Ç–æ–º\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º',
                            'cooking_time': '10 –º–∏–Ω—É—Ç'
                        },
                        {
                            'type': '–£–ñ–ò–ù',
                            'emoji': 'üçõ',
                            'name': '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏',
                            'time': '19:00',
                            'calories': '400 –∫–∫–∞–ª',
                            'ingredients': '‚Ä¢ –ë–µ–ª–∞—è —Ä—ã–±–∞ - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 150–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 100–≥\n‚Ä¢ –õ—É–∫ - 50–≥',
                            'instructions': '1. –ó–∞–ø–µ–∫–∏—Ç–µ —Ä—ã–±—É —Å –æ–≤–æ—â–∞–º–∏\n2. –ü—Ä–∏–ø—Ä–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—è–º–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ä—è—á–∏–º',
                            'cooking_time': '30 –º–∏–Ω—É—Ç'
                        }
                    ],
                    'total_calories': '1650 –∫–∫–∞–ª'
                }
                plan['days'].append(day)
            
            return plan
            
        except Exception as e:
            logger.error(f"Error parsing GPT response: {e}")
            return self._generate_fallback_plan(user_data)
    
    def _generate_fallback_plan(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
        logger.info("üîÑ Generating fallback nutrition plan")
        
        plan = {
            'user_data': user_data,
            'days': [],
            'shopping_list': "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, —Ä—ã–±–∞, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –∫—Ä—É–ø—ã, —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥",
            'water_regime': "1.5-2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å",
            'general_recommendations': "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            'created_at': datetime.now().isoformat()
        }
        
        # –°–æ–∑–¥–∞–µ–º 7 –¥–Ω–µ–π
        day_names = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        
        for day_name in day_names:
            day = {
                'name': day_name,
                'meals': [
                    {
                        'type': '–ó–ê–í–¢–†–ê–ö',
                        'emoji': 'üç≥',
                        'name': '–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                        'time': '8:00',
                        'calories': '350 –∫–∫–∞–ª',
                        'ingredients': '‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 60–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 150–º–ª\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.',
                        'instructions': '1. –í–∞—Ä–∏—Ç–µ –æ–≤—Å—è–Ω–∫—É 10 –º–∏–Ω—É—Ç\n2. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ –º–µ–¥\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Ç–µ–ø–ª—ã–º',
                        'cooking_time': '15 –º–∏–Ω—É—Ç'
                    },
                    {
                        'type': '–ü–ï–†–ï–ö–£–° 1',
                        'emoji': 'ü•ó',
                        'name': '–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏',
                        'time': '11:00',
                        'calories': '250 –∫–∫–∞–ª',
                        'ingredients': '‚Ä¢ –ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 150–≥\n‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30–≥\n‚Ä¢ –Ø–≥–æ–¥—ã - 50–≥',
                        'instructions': '1. –°–º–µ—à–∞–π—Ç–µ –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏\n2. –î–æ–±–∞–≤—å—Ç–µ —è–≥–æ–¥—ã\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º',
                        'cooking_time': '5 –º–∏–Ω—É—Ç'
                    },
                    {
                        'type': '–û–ë–ï–î',
                        'emoji': 'üç≤',
                        'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π',
                        'time': '13:00',
                        'calories': '450 –∫–∫–∞–ª',
                        'ingredients': '‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ì—Ä–µ—á–∫–∞ - 80–≥\n‚Ä¢ –û–≥—É—Ä—Ü—ã - 100–≥\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 100–≥',
                        'instructions': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏',
                        'cooking_time': '25 –º–∏–Ω—É—Ç'
                    },
                    {
                        'type': '–ü–ï–†–ï–ö–£–° 2',
                        'emoji': 'üçé',
                        'name': '–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç',
                        'time': '16:00',
                        'calories': '200 –∫–∫–∞–ª',
                        'ingredients': '‚Ä¢ –Ø–±–ª–æ–∫–æ - 1 —à—Ç\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ê–ø–µ–ª—å—Å–∏–Ω - 1 —à—Ç\n‚Ä¢ –ô–æ–≥—É—Ä—Ç - 50–≥',
                        'instructions': '1. –ù–∞—Ä–µ–∂—å—Ç–µ —Ñ—Ä—É–∫—Ç—ã\n2. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –π–æ–≥—É—Ä—Ç–æ–º\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º',
                        'cooking_time': '10 –º–∏–Ω—É—Ç'
                    },
                    {
                        'type': '–£–ñ–ò–ù',
                        'emoji': 'üçõ',
                        'name': '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏',
                        'time': '19:00',
                        'calories': '400 –∫–∫–∞–ª',
                        'ingredients': '‚Ä¢ –ë–µ–ª–∞—è —Ä—ã–±–∞ - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 150–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 100–≥\n‚Ä¢ –õ—É–∫ - 50–≥',
                        'instructions': '1. –ó–∞–ø–µ–∫–∏—Ç–µ —Ä—ã–±—É —Å –æ–≤–æ—â–∞–º–∏\n2. –ü—Ä–∏–ø—Ä–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—è–º–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ä—è—á–∏–º',
                        'cooking_time': '30 –º–∏–Ω—É—Ç'
                    }
                ],
                'total_calories': '1650 –∫–∫–∞–ª'
            }
            plan['days'].append(day)
        
        return plan
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå Exception while handling update: {context.error}")
        
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        bot = NutritionBot()
        
        # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_flask():
            port = int(os.environ.get('PORT', 10000))
            app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info(f"üöÄ Flask server started on port {os.environ.get('PORT', 10000)}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ Starting bot polling...")
        bot.application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    run_bot()
