import os
import logging
import asyncio
import sqlite3
import json
import httpx
import signal
import sys
import re
from datetime import datetime
from flask import Flask, jsonify, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

ADMIN_USER_ID = 362423055
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
BOT_TOKEN = os.getenv('BOT_TOKEN')
RENDER_EXTERNAL_URL = os.getenv('RENDER_EXTERNAL_URL')

# ==================== HEALTH CHECK –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================

class HealthMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.request_count = 0
        self.error_count = 0
        self.last_health_check = datetime.now()
        self.bot_status = "initializing"
        self.db_status = "unknown"
        self.telegram_api_status = "unknown"
        self.yandex_gpt_status = "unknown"
        
    def increment_request(self):
        self.request_count += 1
        
    def increment_error(self):
        self.error_count += 1
        
    def update_bot_status(self, status):
        self.bot_status = status
        self.last_health_check = datetime.now()
        
    def update_db_status(self, status):
        self.db_status = status
        
    def update_telegram_status(self, status):
        self.telegram_api_status = status
        
    def update_yandex_gpt_status(self, status):
        self.yandex_gpt_status = status
        
    def get_uptime(self):
        return datetime.now() - self.start_time
        
    def get_stats(self):
        return {
            "uptime_seconds": int(self.get_uptime().total_seconds()),
            "request_count": self.request_count,
            "error_count": self.error_count,
            "success_rate": ((self.request_count - self.error_count) / self.request_count * 100) if self.request_count > 0 else 100,
            "last_health_check": self.last_health_check.isoformat(),
            "bot_status": self.bot_status,
            "db_status": self.db_status,
            "telegram_api_status": self.telegram_api_status,
            "yandex_gpt_status": self.yandex_gpt_status
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è
health_monitor = HealthMonitor()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_application = None

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({
        "status": "ü§ñ Nutrition Bot is running", 
        "service": "Telegram Nutrition AI Bot",
        "webhook": f"{RENDER_EXTERNAL_URL}/webhook",
        "health": health_monitor.get_stats(),
        "timestamp": datetime.now().isoformat()
    })

@app.route('/health')
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify(health_monitor.get_stats())

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint –¥–ª—è webhook Telegram"""
    global bot_application
    
    if bot_application:
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —á–µ—Ä–µ–∑ PTB
            update = Update.de_json(request.get_json(), bot_application.bot)
            asyncio.create_task(
                process_telegram_update(update)
            )
            return 'ok'
        except Exception as e:
            logger.error(f"Error processing webhook: {e}")
            return 'error', 500
    else:
        logger.error("Bot application not initialized")
        return 'bot not initialized', 500

async def process_telegram_update(update: Update):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram update"""
    global bot_application
    try:
        await bot_application.process_update(update)
    except Exception as e:
        logger.error(f"Error processing telegram update: {e}")

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('PRAGMA journal_mode=WAL')
        cursor.execute('PRAGMA synchronous=NORMAL')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS nutrition_plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS daily_checkins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                weight REAL,
                waist_circumference INTEGER,
                wellbeing_score INTEGER,
                sleep_quality INTEGER,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_limits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                last_plan_date TIMESTAMP,
                plan_count INTEGER DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS shopping_cart (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                ingredient TEXT NOT NULL,
                checked BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        
        health_monitor.update_db_status("healthy")
        logger.info("‚úÖ Database initialized successfully")
        
    except Exception as e:
        health_monitor.update_db_status("error")
        logger.error(f"‚ùå Database initialization failed: {e}")
        raise

def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['user_id'], user_data['username'], user_data['first_name'], user_data['last_name']))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving user: {e}")
    finally:
        conn.close()

def is_admin(user_id):
    return user_id == ADMIN_USER_ID

def can_make_request(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return True
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return True
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_since_last_plan = (datetime.now() - last_plan_date).days
        
        conn.close()
        return days_since_last_plan >= 7
        
    except Exception as e:
        logger.error(f"Error checking request limit: {e}")
        return True

def update_user_limit(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        cursor.execute('''
            INSERT OR REPLACE INTO user_limits (user_id, last_plan_date, plan_count)
            VALUES (?, ?, COALESCE((SELECT plan_count FROM user_limits WHERE user_id = ?), 0) + 1)
        ''', (user_id, current_time, user_id))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error updating user limits: {e}")

def get_days_until_next_plan(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return 0
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return 0
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_passed = (datetime.now() - last_plan_date).days
        days_remaining = 7 - days_passed
        
        conn.close()
        return max(0, days_remaining)
        
    except Exception as e:
        logger.error(f"Error getting days until next plan: {e}")
        return 0

def save_plan(user_id, plan_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO nutrition_plans (user_id, plan_data) VALUES (?, ?)', 
                      (user_id, json.dumps(plan_data)))
        plan_id = cursor.lastrowid
        conn.commit()
        return plan_id
    except Exception as e:
        logger.error(f"Error saving plan: {e}")
        return None
    finally:
        conn.close()

def save_checkin(user_id, weight, waist, wellbeing, sleep):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO daily_checkins (user_id, weight, waist_circumference, wellbeing_score, sleep_quality)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, weight, waist, wellbeing, sleep))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving checkin: {e}")
    finally:
        conn.close()

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT date, weight, waist_circumference, wellbeing_score, sleep_quality
            FROM daily_checkins WHERE user_id = ? ORDER BY date DESC LIMIT 7
        ''', (user_id,))
        checkins = cursor.fetchall()
        return checkins
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return []
    finally:
        conn.close()

def get_latest_plan(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT plan_data FROM nutrition_plans 
            WHERE user_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (user_id,))
        result = cursor.fetchone()
        return json.loads(result[0]) if result else None
    except Exception as e:
        logger.error(f"Error getting latest plan: {e}")
        return None
    finally:
        conn.close()

def get_user_plans_count(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT COUNT(*) FROM nutrition_plans WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else 0
    except Exception as e:
        logger.error(f"Error getting user plans count: {e}")
        return 0
    finally:
        conn.close()

def save_shopping_cart(user_id, ingredients):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('DELETE FROM shopping_cart WHERE user_id = ?', (user_id,))
        
        for ingredient in ingredients:
            cursor.execute('''
                INSERT INTO shopping_cart (user_id, ingredient, checked)
                VALUES (?, ?, ?)
            ''', (user_id, ingredient, False))
        
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving shopping cart: {e}")
    finally:
        conn.close()

def get_shopping_cart(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT id, ingredient, checked FROM shopping_cart 
            WHERE user_id = ? ORDER BY created_at
        ''', (user_id,))
        items = cursor.fetchall()
        return items
    except Exception as e:
        logger.error(f"Error getting shopping cart: {e}")
        return []
    finally:
        conn.close()

def update_shopping_item(item_id, checked):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('UPDATE shopping_cart SET checked = ? WHERE id = ?', (checked, item_id))
        conn.commit()
    except Exception as e:
        logger.error(f"Error updating shopping item: {e}")
    finally:
        conn.close()

def clear_shopping_cart(user_id):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('DELETE FROM shopping_cart WHERE user_id = ?', (user_id,))
        conn.commit()
    except Exception as e:
        logger.error(f"Error clearing shopping cart: {e}")
    finally:
        conn.close()

async def check_database_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['users', 'nutrition_plans', 'daily_checkins', 'user_limits', 'shopping_cart']
        missing_tables = [table for table in required_tables if table not in tables]
        
        if missing_tables:
            logger.warning(f"Missing tables: {missing_tables}")
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            init_database()
        
        conn.close()
        health_monitor.update_db_status("healthy")
        return True
        
    except Exception as e:
        health_monitor.update_db_status("error")
        logger.error(f"‚ùå Database health check failed: {e}")
        return False

async def check_telegram_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API"""
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f'https://api.telegram.org/bot{BOT_TOKEN}/getMe')
            if response.status_code == 200:
                health_monitor.update_telegram_status("healthy")
                return True
            else:
                health_monitor.update_telegram_status("error")
                return False
    except Exception as e:
        health_monitor.update_telegram_status("error")
        logger.error(f"‚ùå Telegram API health check failed: {e}")
        return False

async def check_yandex_gpt_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex GPT API"""
    try:
        if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
            health_monitor.update_yandex_gpt_status("not_configured")
            return True
            
        headers = {
            'Authorization': f'Api-Key {YANDEX_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 10
            },
            "messages": [
                {
                    "role": "user",
                    "text": "–û—Ç–≤–µ—Ç—å 'OK'"
                }
            ]
        }
        
        async with httpx.AsyncClient(timeout=15.0) as client:
            response = await client.post(YANDEX_GPT_URL, headers=headers, json=data)
            if response.status_code == 200:
                health_monitor.update_yandex_gpt_status("healthy")
                return True
            else:
                health_monitor.update_yandex_gpt_status("error")
                return False
                
    except Exception as e:
        health_monitor.update_yandex_gpt_status("error")
        logger.error(f"‚ùå Yandex GPT health check failed: {e}")
        return False

# ==================== YANDEX GPT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

class YandexGPT:
    def __init__(self):
        self.api_key = YANDEX_API_KEY
        self.folder_id = YANDEX_FOLDER_ID
        self.url = YANDEX_GPT_URL
    
    async def generate_nutrition_plan(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.api_key or not self.folder_id:
                logger.warning("Yandex GPT credentials not set, using demo data")
                return self._generate_demo_plan(user_data)
            
            prompt = self._create_prompt(user_data)
            
            headers = {
                'Authorization': f'Api-Key {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                "modelUri": f"gpt://{self.folder_id}/yandexgpt/latest",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": 4000
                },
                "messages": [
                    {
                        "role": "system",
                        "text": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π. 
–í–∫–ª—é—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ JSON."""
                    },
                    {
                        "role": "user",
                        "text": prompt
                    }
                ]
            }
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(self.url, headers=headers, json=data)
                
                if response.status_code == 200:
                    result = response.json()
                    plan_text = result['result']['alternatives'][0]['message']['text']
                    
                    json_match = re.search(r'\{.*\}', plan_text, re.DOTALL)
                    if json_match:
                        plan_json = json.loads(json_match.group())
                        plan_json['user_data'] = user_data
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                        if 'water_recommendation' not in plan_json:
                            plan_json['water_recommendation'] = self._get_water_recommendation(user_data)
                        
                        return plan_json
                    else:
                        logger.error("No JSON found in GPT response")
                        return self._generate_demo_plan(user_data)
                else:
                    logger.error(f"Yandex GPT API error: {response.status_code}")
                    return self._generate_demo_plan(user_data)
                
        except Exception as e:
            logger.error(f"Error generating plan with Yandex GPT: {e}")
            return self._generate_demo_plan(user_data)
    
    def _create_prompt(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT"""
        gender = user_data.get('gender', '')
        age = user_data.get('age', '')
        height = user_data.get('height', '')
        weight = user_data.get('weight', '')
        goal = user_data.get('goal', '')
        activity = user_data.get('activity', '')
        
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:

–ü–æ–ª: {gender}
–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
–†–æ—Å—Ç: {height} —Å–º
–í–µ—Å: {weight} –∫–≥
–¶–µ–ª—å: {goal}
–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
- –£—á–µ—Ç —Ü–µ–ª–∏ {goal}
- 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å
- –£–∫–∞–∑–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
- –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
- –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ format JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
        return prompt
    
    def _get_water_recommendation(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        weight = user_data.get('weight', 70)
        activity = user_data.get('activity', '')
        
        # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: 30-40 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
        base_water = weight * 35
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_multiplier = {
            '–ù–ò–ó–ö–ê–Ø': 1.0,
            '–°–†–ï–î–ù–Ø–Ø': 1.2,
            '–í–´–°–û–ö–ê–Ø': 1.4
        }.get(activity, 1.2)
        
        recommended_water = int(base_water * activity_multiplier)
        
        return {
            "daily_recommendation": f"{recommended_water} –º–ª",
            "description": f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–∏–≤–∞—Ç—å {recommended_water} –º–ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.",
            "tips": [
                "1-2 —Å—Ç–∞–∫–∞–Ω–∞ —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫",
                "–ü–æ 1 —Å—Ç–∞–∫–∞–Ω—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏", 
                "–í–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 500-1000 –º–ª",
                "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞"
            ]
        }
    
    def _generate_demo_plan(self, user_data):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–µ–º–æ-–ø–ª–∞–Ω"""
        days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        
        plan = {
            'user_data': user_data,
            'water_recommendation': self._get_water_recommendation(user_data),
            'days': []
        }
        
        demo_meals = [
            {
                'type': '–ó–ê–í–¢–†–ê–ö',
                'time': '08:00',
                'emoji': 'üç≥',
                'name': '–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                'calories': '350 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 200–º–ª\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.',
                'instructions': '1. –°–≤–∞—Ä–∏—Ç–µ –æ–≤—Å—è–Ω–∫—É –Ω–∞ –º–æ–ª–æ–∫–µ\n2. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ –º–µ–¥',
                'cooking_time': '15 –º–∏–Ω'
            },
            {
                'type': '–ü–ï–†–ï–ö–£–° 1', 
                'time': '11:00',
                'emoji': 'ü•ó',
                'name': '–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏',
                'calories': '200 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç - 150–≥\n‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 30–≥\n‚Ä¢ –Ø–≥–æ–¥—ã - 50–≥',
                'instructions': '1. –°–º–µ—à–∞–π—Ç–µ –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏\n2. –î–æ–±–∞–≤—å—Ç–µ —è–≥–æ–¥—ã',
                'cooking_time': '2 –º–∏–Ω'
            },
            {
                'type': '–û–ë–ï–î',
                'time': '14:00', 
                'emoji': 'üç≤',
                'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π',
                'calories': '450 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ì—Ä–µ—á–∫–∞ - 100–≥\n‚Ä¢ –û–≤–æ—â–∏ - 200–≥\n‚Ä¢ –ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 1 —Å—Ç.–ª.',
                'instructions': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –û–±–∂–∞—Ä—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n3. –ü–æ—Ç—É—à–∏—Ç–µ –æ–≤–æ—â–∏',
                'cooking_time': '25 –º–∏–Ω'
            },
            {
                'type': '–ü–ï–†–ï–ö–£–° 2',
                'time': '17:00',
                'emoji': 'üçé', 
                'name': '–¢–≤–æ—Ä–æ–≥ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                'calories': '180 –∫–∫–∞–ª',
                'ingredients': '‚Ä¢ –¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π - 150–≥\n‚Ä¢ –Ø–±–ª–æ–∫–æ - 1 —à—Ç\n‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - —â–µ–ø–æ—Ç–∫–∞',
                'instructions': '1. –ù–∞—Ä–µ–∂—å—Ç–µ —è–±–ª–æ–∫–æ\n2. –°–º–µ—à–∞–π—Ç–µ —Å —Ç–≤–æ—Ä–æ–≥–æ–º\n3. –ü–æ—Å—ã–ø—å—Ç–µ –∫–æ—Ä–∏—Ü–µ–π',
                'cooking_time': '5 –º–∏–Ω'
            },
            {
                'type': '–£–ñ–ò–ù',
                'time': '20:00',
                'emoji': 'üçõ',
                'name': '–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É —Å –æ–≤–æ—â–∞–º–∏',
                'calories': '400 –∫–∫–∞–ª', 
                'ingredients': '‚Ä¢ –§–∏–ª–µ —Ä—ã–±—ã - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 150–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç\n‚Ä¢ –õ–∏–º–æ–Ω - 1 –¥–æ–ª—å–∫–∞',
                'instructions': '1. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Ä—ã–±—É –Ω–∞ –ø–∞—Ä—É\n2. –û—Ç–≤–∞—Ä–∏—Ç–µ –æ–≤–æ—â–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–∏–º–æ–Ω–æ–º',
                'cooking_time': '20 –º–∏–Ω'
            }
        ]
        
        for day_name in days:
            day_plan = {
                'name': day_name,
                'total_calories': '1800-2000 –∫–∫–∞–ª',
                'meals': demo_meals.copy()
            }
            plan['days'].append(day_plan)
        
        return plan

# ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ ====================

class InteractiveMenu:
    def __init__(self):
        self.days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        self.meals = ['–ó–ê–í–¢–†–ê–ö', '–ü–ï–†–ï–ö–£–° 1', '–û–ë–ï–î', '–ü–ï–†–ï–ö–£–° 2', '–£–ñ–ò–ù']
    
    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù", callback_data="create_plan")],
            [InlineKeyboardButton("üìà –ß–ï–ö-–ò–ù", callback_data="checkin")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
            [InlineKeyboardButton("üìã –ú–û–ô –ü–õ–ê–ù", callback_data="my_plan")],
            [InlineKeyboardButton("üõí –ö–û–†–ó–ò–ù–ê", callback_data="shopping_cart")],
            [InlineKeyboardButton("üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú", callback_data="water_mode")],
            [InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_data_input(self, step=1):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
        if step == 1:
            keyboard = [
                [InlineKeyboardButton("üë® –ú–£–ñ–ß–ò–ù–ê", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–ï–ù–©–ò–ù–ê", callback_data="gender_female")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        elif step == 2:
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–û–•–£–î–ï–ù–ò–ï", callback_data="goal_weight_loss")],
                [InlineKeyboardButton("üí™ –ù–ê–ë–û–† –ú–ê–°–°–´", callback_data="goal_mass")],
                [InlineKeyboardButton("‚öñÔ∏è –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï", callback_data="goal_maintain")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_gender")]
            ]
        elif step == 3:
            keyboard = [
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í–´–°–û–ö–ê–Ø", callback_data="activity_high")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–†–ï–î–ù–Ø–Ø", callback_data="activity_medium")],
                [InlineKeyboardButton("üí§ –ù–ò–ó–ö–ê–Ø", callback_data="activity_low")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_goal")]
            ]
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_checkin_menu(self):
        """–ú–µ–Ω—é –¥–ª—è —á–µ–∫-–∏–Ω–∞"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–ê–ü–ò–°–ê–¢–¨ –î–ê–ù–ù–´–ï", callback_data="checkin_data")],
            [InlineKeyboardButton("üìä –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–°–¢–û–†–ò–Æ", callback_data="checkin_history")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_management_menu(self):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –ù–ï–î–ï–õ–Æ", callback_data="view_week")],
            [InlineKeyboardButton("üìÑ –°–ö–ê–ß–ê–¢–¨ –í TXT", callback_data="download_plan")],
            [InlineKeyboardButton("üìä –ò–ù–§–û –û –ü–õ–ê–ù–ê–•", callback_data="plan_info")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_water_menu(self):
        """–ú–µ–Ω—é –≤–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        keyboard = [
            [InlineKeyboardButton("üíß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–û–î–ï", callback_data="water_recommendations")],
            [InlineKeyboardButton("‚è± –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –í–û–î–ï", callback_data="water_reminders")],
            [InlineKeyboardButton("üìä –ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–û–î–´", callback_data="water_stats")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_week_days_menu(self):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", callback_data="day_0")],
            [InlineKeyboardButton("üìÖ –í–¢–û–†–ù–ò–ö", callback_data="day_1")],
            [InlineKeyboardButton("üìÖ –°–†–ï–î–ê", callback_data="day_2")],
            [InlineKeyboardButton("üìÖ –ß–ï–¢–í–ï–†–ì", callback_data="day_3")],
            [InlineKeyboardButton("üìÖ –ü–Ø–¢–ù–ò–¶–ê", callback_data="day_4")],
            [InlineKeyboardButton("üìÖ –°–£–ë–ë–û–¢–ê", callback_data="day_5")],
            [InlineKeyboardButton("üìÖ –í–û–°–ö–†–ï–°–ï–ù–¨–ï", callback_data="day_6")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_to_plan_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_day_meals_menu(self, day_index):
        """–ú–µ–Ω—é –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        meals = ['üç≥ –ó–ê–í–¢–†–ê–ö', 'ü•ó –ü–ï–†–ï–ö–£–° 1', 'üç≤ –û–ë–ï–î', 'üçé –ü–ï–†–ï–ö–£–° 2', 'üçõ –£–ñ–ò–ù']
        keyboard = []
        
        for i, meal in enumerate(meals):
            keyboard.append([InlineKeyboardButton(meal, callback_data=f"meal_{day_index}_{i}")])
        
        keyboard.append([InlineKeyboardButton("üìÖ –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –î–ï–ù–¨", callback_data="view_week")])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data="back_to_plan_menu")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_meal_detail_menu(self, day_index, meal_index):
        """–ú–µ–Ω—é –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–õ–ï–î–£–Æ–©–ò–ô –ü–†–ò–ï–ú –ü–ò–©–ò", callback_data=f"next_meal_{day_index}_{meal_index}")],
            [InlineKeyboardButton("üìÖ –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –î–ï–ù–¨", callback_data="view_week")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –í –ú–ï–ù–Æ", callback_data="back_to_plan_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_shopping_cart_menu(self, items, page=0):
        """–ú–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫ —Å –≥–∞–ª–æ—á–∫–∞–º–∏"""
        items_per_page = 10
        start_idx = page * items_per_page
        end_idx = start_idx + items_per_page
        current_items = items[start_idx:end_idx]
        
        keyboard = []
        
        for item in current_items:
            item_id, ingredient, checked = item
            status = "‚úÖ" if checked else "‚¨ú"
            keyboard.append([
                InlineKeyboardButton(f"{status} {ingredient}", callback_data=f"toggle_{item_id}")
            ])
        
        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data=f"cart_page_{page-1}"))
        
        if end_idx < len(items):
            navigation_buttons.append(InlineKeyboardButton("–í–ü–ï–†–ï–î ‚ñ∂Ô∏è", callback_data=f"cart_page_{page+1}"))
        
        if navigation_buttons:
            keyboard.append(navigation_buttons)
        
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –û–ë–ù–û–í–ò–¢–¨ –°–ü–ò–°–û–ö –ò–ó –ü–õ–ê–ù–ê", callback_data="refresh_cart")],
            [InlineKeyboardButton("üßπ –û–ß–ò–°–¢–ò–¢–¨ –ö–û–†–ó–ò–ù–£", callback_data="clear_cart")],
            [InlineKeyboardButton("üìÑ –°–ö–ê–ß–ê–¢–¨ –°–ü–ò–°–û–ö", callback_data="download_shopping_list")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î –í –ú–ï–ù–£", callback_data="back_main")]
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_back_menu(self):
        """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================

class NutritionBot:
    def __init__(self):
        self.bot_token = BOT_TOKEN
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN not found")
            health_monitor.update_bot_status("error")
            raise ValueError("BOT_TOKEN is required")
            
        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_database()
        
        try:
            self.application = Application.builder().token(self.bot_token).build()
            self.menu = InteractiveMenu()
            self.yandex_gpt = YandexGPT()
            self._setup_handlers()
            
            health_monitor.update_bot_status("healthy")
            logger.info("‚úÖ Bot initialized successfully")
            
        except Exception as e:
            health_monitor.update_bot_status("error")
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("dbstats", self.dbstats_command))
        self.application.add_handler(CommandHandler("export_plan", self.export_plan_command))
        self.application.add_handler(CommandHandler("wake", self.wake_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^.*$"))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def dbstats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î"""
        health_monitor.increment_request()
        try:
            user_id = update.effective_user.id
            if not is_admin(user_id):
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM users")
            users_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM nutrition_plans")
            plans_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM daily_checkins")
            checkins_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM shopping_cart")
            cart_count = cursor.fetchone()[0]
            
            conn.close()
            
            stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üìã –ü–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è: {plans_count}
üìà –ß–µ–∫-–∏–Ω–æ–≤: {checkins_count}
üõí –ó–∞–ø–∏—Å–µ–π –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö: {cart_count}
"""
            await update.message.reply_text(stats_text)
            
        except Exception as e:
            health_monitor.increment_error()
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î")
    
    async def export_plan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–∞ –≤ TXT"""
        health_monitor.increment_request()
        try:
            user_id = update.effective_user.id
            await update.message.reply_text("üìÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à –ø–ª–∞–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
            await self.send_plan_as_file(update, context, user_id)
            
        except Exception as e:
            health_monitor.increment_error()
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        health_monitor.increment_request()
        
        stats = health_monitor.get_stats()
        status_text = f"""
ü§ñ **–°–¢–ê–¢–£–° –ë–û–¢–ê**

‚úÖ **–ë–æ—Ç:** {health_monitor.bot_status.upper()}
üóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {health_monitor.db_status.upper()}
üì± **Telegram API:** {health_monitor.telegram_api_status.upper()}
ü§ñ **Yandex GPT:** {health_monitor.yandex_gpt_status.upper()}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime_seconds']} —Å–µ–∫
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['request_count']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['error_count']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%

üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stats['last_health_check']}
"""
        await update.message.reply_text(status_text)
    
    async def wake_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞"""
        health_monitor.increment_request()
        
        await check_database_health()
        await check_telegram_api_health()
        
        await update.message.reply_text("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        health_monitor.increment_request()
        
        try:
            user = update.effective_user
            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }
            save_user(user_data)
            
            welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Å AI!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
            if is_admin(user.id):
                welcome_text += "\nüëë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∞–º!"
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            health_monitor.increment_error()
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        health_monitor.increment_request()
        await update.message.reply_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        logger.info(f"Callback received: {data}")
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
            if data == "create_plan":
                await self._handle_create_plan(query, context)
            elif data == "checkin":
                await self._handle_checkin_menu(query, context)
            elif data == "stats":
                await self._handle_stats(query, context)
            elif data == "my_plan":
                await self._handle_my_plan_menu(query, context)
            elif data == "shopping_cart":
                await self._handle_shopping_cart(query, context)
            elif data == "water_mode":
                await self._handle_water_mode(query, context)
            elif data == "help":
                await self._handle_help(query, context)
            elif data == "plan_info":
                await self._handle_plan_info(query, context)
            elif data == "download_plan":
                await self._handle_download_plan(query, context)
            elif data == "view_week":
                await self._handle_view_week(query, context)
            elif data == "download_shopping_list":
                await self._handle_download_shopping_list(query, context)
            elif data == "back_to_plan_menu":
                await self._handle_my_plan_menu(query, context)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
            elif data == "back_main":
                await self._show_main_menu(query)
            elif data == "back_gender":
                await self._handle_gender_back(query, context)
            elif data == "back_goal":
                await self._handle_goal_back(query, context)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
            elif data.startswith("gender_"):
                await self._handle_gender(query, context, data)
            elif data.startswith("goal_"):
                await self._handle_goal(query, context, data)
            elif data.startswith("activity_"):
                await self._handle_activity(query, context, data)
            
            # –ß–µ–∫-–∏–Ω
            elif data == "checkin_data":
                await self._handle_checkin_data(query, context)
            elif data == "checkin_history":
                await self._handle_checkin_history(query, context)
            
            # –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º
            elif data == "water_recommendations":
                await self._handle_water_recommendations(query, context)
            elif data == "water_reminders":
                await self._handle_water_reminders(query, context)
            elif data == "water_stats":
                await self._handle_water_stats(query, context)
            
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
            elif data.startswith("day_"):
                await self._handle_day_selection(query, context, data)
            elif data.startswith("meal_"):
                await self._handle_meal_selection(query, context, data)
            elif data.startswith("next_meal_"):
                await self._handle_next_meal(query, context, data)
            
            # –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
            elif data.startswith("toggle_"):
                await self._handle_toggle_cart_item(query, context, data)
            elif data.startswith("cart_page_"):
                await self._handle_cart_page(query, context, data)
            elif data == "refresh_cart":
                await self._handle_refresh_cart(query, context)
            elif data == "clear_cart":
                await self._handle_clear_cart(query, context)
            
            else:
                logger.warning(f"Unknown callback data: {data}")
                await query.edit_message_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            health_monitor.increment_error()
            logger.error(f"Error in callback handler: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_create_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            
            if not is_admin(user_id) and not can_make_request(user_id):
                days_remaining = get_days_until_next_plan(user_id)
                await query.edit_message_text(
                    f"‚è≥ –í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n–°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            context.user_data['plan_data'] = {}
            context.user_data['plan_step'] = 1
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
            
        except Exception as e:
            health_monitor.increment_error()
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
        context.user_data['plan_step'] = 1
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=self.menu.get_plan_data_input(step=1)
        )
    
    async def _handle_goal_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏"""
        context.user_data['plan_step'] = 2
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=self.menu.get_plan_data_input(step=2)
        )
    
    async def _handle_gender(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        gender_map = {
            "gender_male": "–ú–£–ñ–ß–ò–ù–ê",
            "gender_female": "–ñ–ï–ù–©–ò–ù–ê"
        }
        
        context.user_data['plan_data']['gender'] = gender_map[data]
        context.user_data['plan_step'] = 2
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=self.menu.get_plan_data_input(step=2)
        )
    
    async def _handle_goal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
        goal_map = {
            "goal_weight_loss": "–ü–û–•–£–î–ï–ù–ò–ï",
            "goal_mass": "–ù–ê–ë–û–† –ú–ê–°–°–´", 
            "goal_maintain": "–ü–û–î–î–ï–†–ñ–ê–ù–ò–ï"
        }
        
        context.user_data['plan_data']['goal'] = goal_map[data]
        context.user_data['plan_step'] = 3
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=self.menu.get_plan_data_input(step=3)
        )
    
    async def _handle_activity(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        activity_map = {
            "activity_high": "–í–´–°–û–ö–ê–Ø",
            "activity_medium": "–°–†–ï–î–ù–Ø–Ø",
            "activity_low": "–ù–ò–ó–ö–ê–Ø"
        }
        
        context.user_data['plan_data']['activity'] = activity_map[data]
        context.user_data['awaiting_input'] = 'plan_details'
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 30, 180, 75\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu",
            reply_markup=self.menu.get_back_menu()
        )
    
    async def _handle_checkin_menu(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —á–µ–∫-–∏–Ω–∞"""
        await query.edit_message_text(
            "üìà –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ß–ï–ö-–ò–ù\n\n"
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            "‚Ä¢ –í–µ—Å\n‚Ä¢ –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏\n‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_checkin_menu()
        )
    
    async def _handle_checkin_data(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞"""
        context.user_data['awaiting_input'] = 'checkin_data'
        await query.edit_message_text(
            "üìù –í–í–ï–î–ò–¢–ï –î–ê–ù–ù–´–ï –ß–ï–ö-–ò–ù–ê\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–í–µ—Å (–∫–≥), –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º), –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ (1-5), –°–æ–Ω (1-5)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu"
        )
    
    async def _handle_checkin_history(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–∫-–∏–Ω–æ–≤"""
        user_id = query.from_user.id
        stats = get_user_stats(user_id)
        
        if not stats:
            await query.edit_message_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–æ–≤",
                reply_markup=self.menu.get_checkin_menu()
            )
            return
        
        stats_text = "üìä –ò–°–¢–û–†–ò–Ø –í–ê–®–ò–• –ß–ï–ö-–ò–ù–û–í:\n\n"
        for stat in stats:
            date, weight, waist, wellbeing, sleep = stat
            stats_text += f"üìÖ {date[:10]}: {weight} –∫–≥, —Ç–∞–ª–∏—è {waist} —Å–º\n"
        
        await query.edit_message_text(stats_text, reply_markup=self.menu.get_checkin_menu())
    
    async def _handle_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = query.from_user.id
        stats = get_user_stats(user_id)
        
        if not stats:
            await query.edit_message_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        stats_text = "üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
        for i, stat in enumerate(stats[:5]):
            date, weight, waist, wellbeing, sleep = stat
            stats_text += f"üìÖ {date[:10]}: {weight} –∫–≥, —Ç–∞–ª–∏—è {waist} —Å–º\n"
        
        await query.edit_message_text(stats_text, reply_markup=self.menu.get_main_menu())
    
    async def _handle_my_plan_menu(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –º–æ–µ–≥–æ –ø–ª–∞–Ω–∞"""
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if not plan:
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        user_data = plan.get('user_data', {})
        menu_text = f"üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–û–ú –ü–ò–¢–ê–ù–ò–Ø\n\n"
        menu_text += f"üë§ {user_data.get('gender', '')}, {user_data.get('age', '')} –ª–µ—Ç\n"
        menu_text += f"üìè {user_data.get('height', '')} —Å–º, {user_data.get('weight', '')} –∫–≥\n"
        menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(
            menu_text,
            reply_markup=self.menu.get_plan_management_menu()
        )
    
    async def _handle_plan_info(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∞—Ö"""
        user_id = query.from_user.id
        plans_count = get_user_plans_count(user_id)
        days_remaining = get_days_until_next_plan(user_id)
        
        info_text = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–®–ò–• –ü–õ–ê–ù–ê–•\n\n"
        info_text += f"üìã –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–Ω–æ–≤: {plans_count}\n"
        
        if is_admin(user_id):
            info_text += "üëë –°—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n"
        else:
            if days_remaining > 0:
                info_text += f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑: {days_remaining} –¥–Ω–µ–π\n"
            else:
                info_text += "‚úÖ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω!\n"
        
        await query.edit_message_text(
            info_text,
            reply_markup=self.menu.get_plan_management_menu()
        )
    
    async def _handle_download_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        user_id = query.from_user.id
        await self.send_plan_as_file(query, context, user_id)
    
    async def _handle_view_week(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if not plan:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        week_text = "üìÖ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ\n\n"
        week_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n"
        
        for i, day in enumerate(plan.get('days', [])):
            week_text += f"üìÖ {day['name']}\n"
            week_text += f"üî• {day.get('total_calories', '~1800 –∫–∫–∞–ª')}\n\n"
        
        await query.edit_message_text(
            week_text,
            reply_markup=self.menu.get_week_days_menu()
        )
    
    async def _handle_day_selection(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
        day_index = int(data.split('_')[1])
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if not plan or day_index >= len(plan.get('days', [])):
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω—è",
                reply_markup=self.menu.get_week_days_menu()
            )
            return
        
        day = plan['days'][day_index]
        day_text = f"üìÖ {day['name']}\n\n"
        day_text += f"üî• –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {day.get('total_calories', '~1800 –∫–∫–∞–ª')}\n\n"
        day_text += "üçΩ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏:\n\n"
        
        for i, meal in enumerate(day.get('meals', [])):
            day_text += f"{meal['emoji']} {meal['type']} ({meal['time']})\n"
            day_text += f"   {meal['name']} - {meal['calories']}\n\n"
        
        day_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        
        await query.edit_message_text(
            day_text,
            reply_markup=self.menu.get_day_meals_menu(day_index)
        )
    
    async def _handle_meal_selection(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        parts = data.split('_')
        day_index = int(parts[1])
        meal_index = int(parts[2])
        
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if not plan or day_index >= len(plan.get('days', [])):
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
                reply_markup=self.menu.get_week_days_menu()
            )
            return
        
        day = plan['days'][day_index]
        if meal_index >= len(day.get('meals', [])):
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
                reply_markup=self.menu.get_day_meals_menu(day_index)
            )
            return
        
        meal = day['meals'][meal_index]
        meal_text = f"üçΩ {meal['type']} - {day['name']}\n\n"
        meal_text += f"üïê –í—Ä–µ–º—è: {meal['time']}\n"
        meal_text += f"üìù –ë–ª—é–¥–æ: {meal['name']}\n"
        meal_text += f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {meal['calories']}\n"
        meal_text += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal['cooking_time']}\n\n"
        
        meal_text += "üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
        meal_text += f"{meal['ingredients']}\n\n"
        
        meal_text += "üë©‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n"
        meal_text += f"{meal['instructions']}"
        
        await query.edit_message_text(
            meal_text,
            reply_markup=self.menu.get_meal_detail_menu(day_index, meal_index)
        )
    
    async def _handle_next_meal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏"""
        parts = data.split('_')
        day_index = int(parts[2])
        meal_index = int(parts[3])
        
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if not plan:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        next_meal_index = meal_index + 1
        next_day_index = day_index
        
        if next_meal_index >= len(plan['days'][day_index].get('meals', [])):
            next_meal_index = 0
            next_day_index += 1
        
        if next_day_index >= len(plan.get('days', [])):
            next_day_index = 0
        
        next_callback = f"meal_{next_day_index}_{next_meal_index}"
        await self._handle_meal_selection(query, context, next_callback)
    
    async def _handle_water_mode(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        await query.edit_message_text(
            "üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ö—É–¥–µ–Ω–∏—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_water_menu()
        )
    
    async def _handle_water_recommendations(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–æ–¥–µ"""
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if plan and 'water_recommendation' in plan:
            water_info = plan['water_recommendation']
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            water_info = self.yandex_gpt._get_water_recommendation({'weight': 70, 'activity': '–°–†–ï–î–ù–Ø–Ø'})
        
        water_text = "üíß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–û–î–ù–û–ú–£ –†–ï–ñ–ò–ú–£\n\n"
        water_text += f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {water_info['daily_recommendation']}\n"
        water_text += f"üìù {water_info['description']}\n\n"
        
        water_text += "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã:\n"
        for tip in water_info['tips']:
            water_text += f"{tip}\n"
        
        water_text += "\nüö∞ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–∏—Ç—å—è –≤–æ–¥—ã:\n"
        water_text += "‚Ä¢ –£—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫ - 1-2 —Å—Ç–∞–∫–∞–Ω–∞\n‚Ä¢ –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã\n‚Ä¢ –ß–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–¥—ã\n‚Ä¢ –í–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n‚Ä¢ –ü—Ä–∏ —á—É–≤—Å—Ç–≤–µ –≥–æ–ª–æ–¥–∞\n"
        
        await query.edit_message_text(
            water_text,
            reply_markup=self.menu.get_water_menu()
        )
    
    async def _handle_water_reminders(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ"""
        reminder_text = "‚è± –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –û –í–û–î–ï\n\n"
        reminder_text += "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
        reminder_text += "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:\n"
        reminder_text += "   ‚Ä¢ 08:00 - 2 —Å—Ç–∞–∫–∞–Ω–∞\n"
        reminder_text += "   ‚Ä¢ 11:00 - 1 —Å—Ç–∞–∫–∞–Ω\n"
        reminder_text += "   ‚Ä¢ 14:00 - 1 —Å—Ç–∞–∫–∞–Ω\n"
        reminder_text += "   ‚Ä¢ 17:00 - 1 —Å—Ç–∞–∫–∞–Ω\n"
        reminder_text += "   ‚Ä¢ 20:00 - 1 —Å—Ç–∞–∫–∞–Ω\n\n"
        reminder_text += "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n"
        reminder_text += "   ‚Ä¢ Water Drink Reminder\n"
        reminder_text += "   ‚Ä¢ Hydro Coach\n"
        reminder_text += "   ‚Ä¢ Plant Nanny\n\n"
        reminder_text += "3. –î–µ—Ä–∂–∏—Ç–µ –≤–æ–¥—É –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∏–¥—É\n"
        
        await query.edit_message_text(
            reminder_text,
            reply_markup=self.menu.get_water_menu()
        )
    
    async def _handle_water_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥—ã"""
        stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –í–û–î–´\n\n"
        stats_text += "üíß –ü–æ–ª—å–∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã:\n"
        stats_text += "‚Ä¢ –£—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –Ω–∞ 20-30%\n"
        stats_text += "‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç\n"
        stats_text += "‚Ä¢ –£–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏\n"
        stats_text += "‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é\n"
        stats_text += "‚Ä¢ –£–ª—É—á—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞\n\n"
        stats_text += "üìà –í–∞—à–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        stats_text += "‚Ä¢ +20% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ—Ö—É–¥–µ–Ω–∏—è\n"
        stats_text += "‚Ä¢ -30% –∫ —É—Å—Ç–∞–ª–æ—Å—Ç–∏\n"
        stats_text += "‚Ä¢ +15% –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        
        await query.edit_message_text(
            stats_text,
            reply_markup=self.menu.get_water_menu()
        )
    
    async def _handle_shopping_cart(self, query, context, page=0):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫"""
        user_id = query.from_user.id
        items = get_shopping_cart(user_id)
        
        if not items:
            plan = get_latest_plan(user_id)
            if plan:
                self._generate_and_save_shopping_cart(user_id, plan)
                items = get_shopping_cart(user_id)
        
        if not items:
            await query.edit_message_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        cart_text = "üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö\n\n"
        cart_text += "‚úÖ - –∫—É–ø–ª–µ–Ω–æ, ‚¨ú - –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å\n\n"
        cart_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ:\n\n"
        
        items_per_page = 10
        start_idx = page * items_per_page
        end_idx = start_idx + items_per_page
        current_items = items[start_idx:end_idx]
        
        for i, item in enumerate(current_items, start=start_idx + 1):
            item_id, ingredient, checked = item
            status = "‚úÖ" if checked else "‚¨ú"
            cart_text += f"{i}. {status} {ingredient}\n"
        
        total_items = len(items)
        checked_items = sum(1 for item in items if item[2])
        cart_text += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {checked_items}/{total_items} –∫—É–ø–ª–µ–Ω–æ"
        
        if page > 0 or (page + 1) * items_per_page < total_items:
            cart_text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}"
        
        await query.edit_message_text(
            cart_text,
            reply_markup=self.menu.get_shopping_cart_menu(items, page)
        )
    
    async def _handle_toggle_cart_item(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        item_id = int(data.split('_')[1])
        user_id = query.from_user.id
        
        items = get_shopping_cart(user_id)
        current_item = next((item for item in items if item[0] == item_id), None)
        
        if current_item:
            new_checked = not current_item[2]
            update_shopping_item(item_id, new_checked)
            
            page = context.user_data.get('cart_page', 0)
            await self._handle_shopping_cart(query, context, page)
    
    async def _handle_cart_page(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã"""
        page = int(data.split('_')[2])
        context.user_data['cart_page'] = page
        await self._handle_shopping_cart(query, context, page)
    
    async def _handle_refresh_cart(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ –ø–ª–∞–Ω–∞"""
        user_id = query.from_user.id
        plan = get_latest_plan(user_id)
        
        if not plan:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è",
                reply_markup=self.menu.get_main_menu()
            )
            return
        
        self._generate_and_save_shopping_cart(user_id, plan)
        await query.edit_message_text(
            "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è!",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _handle_clear_cart(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
        user_id = query.from_user.id
        clear_shopping_cart(user_id)
        
        await query.edit_message_text(
            "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω–∞!",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _handle_download_shopping_list(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        user_id = query.from_user.id
        items = get_shopping_cart(user_id)
        
        if not items:
            await query.edit_message_text(
                "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞",
                reply_markup=self.menu.get_shopping_cart_menu([], 0)
            )
            return
        
        filename = f"shopping_list_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("üõí –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö –ù–ê –ù–ï–î–ï–õ–Æ\n\n")
            f.write("üìã –ü—Ä–æ–¥—É–∫—Ç—ã:\n\n")
            
            checked_count = 0
            for i, item in enumerate(items, 1):
                item_id, ingredient, checked = item
                status = "[‚úÖ]" if checked else "[ ]"
                f.write(f"{i}. {status} {ingredient}\n")
                if checked:
                    checked_count += 1
            
            f.write(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {checked_count}/{len(items)} –∫—É–ø–ª–µ–Ω–æ\n\n")
            f.write("üí° –°–æ–≤–µ—Ç—ã:\n")
            f.write("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏\n")
        
        with open(filename, 'rb') as file:
            await context.bot.send_document(
                chat_id=user_id,
                document=file,
                filename=f"–°–ø–∏—Å–æ–∫_–ø–æ–∫—É–ø–æ–∫_{user_id}.txt",
                caption="üìÑ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é"
            )
        
        await query.edit_message_text(
            "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞!",
            reply_markup=self.menu.get_shopping_cart_menu(items, 0)
        )
        
        import os
        os.remove(filename)
    
    async def _handle_help(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        help_text = """
ü§ñ –°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£ –ü–ò–¢–ê–ù–ò–Ø

üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –£—á–µ—Ç –ø–æ–ª–∞, —Ü–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ 1 –ø–ª–∞–Ω –≤ 7 –¥–Ω–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìà –ß–ï–ö-–ò–ù:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –í–µ—Å, –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Å–æ–Ω
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üìã –ú–û–ô –ü–õ–ê–ù:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ –î–µ—Ç–∞–ª–∏ –ø–æ –¥–Ω—è–º –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ

üõí –ö–û–†–ó–ò–ù–ê:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –ø–ª–∞–Ω–∞
‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥–∞–ª–æ—á–∫–∞–º–∏
‚Ä¢ –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª

üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.
"""
        await query.edit_message_text(
            help_text,
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        health_monitor.increment_request()
        
        try:
            user_id = update.effective_user.id
            text = update.message.text
            
            if 'awaiting_input' in context.user_data:
                input_type = context.user_data['awaiting_input']
                
                if input_type == 'plan_details':
                    await self._process_plan_details(update, context, text)
                elif input_type == 'checkin_data':
                    await self._process_checkin_data(update, context, text)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu",
                        reply_markup=self.menu.get_main_menu()
                    )
                
                context.user_data.pop('awaiting_input', None)
            else:
                await update.message.reply_text(
                    "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            health_monitor.increment_error()
            logger.error(f"Error in message handler: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_plan_details(self, update, context, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞–Ω–∞ —Å Yandex GPT"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 3:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n–ü—Ä–∏–º–µ—Ä: 30, 180, 75",
                    reply_markup=self.menu.get_back_menu()
                )
                return
            
            age = int(parts[0])
            height = int(parts[1])
            weight = float(parts[2])
            
            context.user_data['plan_data'].update({
                'age': age,
                'height': height,
                'weight': weight
            })
            
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞–µ–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI...")
            
            plan = await self.yandex_gpt.generate_nutrition_plan(context.user_data['plan_data'])
            
            if plan:
                plan_id = save_plan(update.effective_user.id, plan)
                update_user_limit(update.effective_user.id)
                
                self._generate_and_save_shopping_cart(update.effective_user.id, plan)
                
                if plan_id:
                    await update.message.reply_text(
                        "‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                        "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n"
                        "üíß –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É\n"
                        "ü§ñ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é Yandex GPT AI\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
                        reply_markup=self.menu.get_main_menu()
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞",
                        reply_markup=self.menu.get_main_menu()
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: 30, 180, 75",
                reply_markup=self.menu.get_back_menu()
            )
        except Exception as e:
            health_monitor.increment_error()
            logger.error(f"Error processing plan details: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_checkin_data(self, update, context, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–∏–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 4:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –í–µ—Å, –¢–∞–ª–∏—è, –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –°–æ–Ω\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3"
                )
                return
            
            weight = float(parts[0])
            waist = int(parts[1])
            wellbeing = int(parts[2])
            sleep = int(parts[3])
            
            if not (1 <= wellbeing <= 5) or not (1 <= sleep <= 5):
                await update.message.reply_text(
                    "‚ùå –û—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 5\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3"
                )
                return
            
            save_checkin(update.effective_user.id, weight, waist, wellbeing, sleep)
            
            await update.message.reply_text(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —á–µ–∫-–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üí™",
                reply_markup=self.menu.get_checkin_menu()
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: 75.5, 85, 4, 3"
            )
        except Exception as e:
            health_monitor.increment_error()
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    def _generate_and_save_shopping_cart(self, user_id, plan):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫ –∏–∑ –ø–ª–∞–Ω–∞ —Å –°–£–ú–ú–ò–†–û–í–ê–ù–ò–ï–ú –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            shopping_list = self._generate_shopping_list(plan)
            save_shopping_cart(user_id, shopping_list)
        except Exception as e:
            logger.error(f"Error generating shopping cart: {e}")
    
    def _generate_shopping_list(self, plan):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ —Å –°–£–ú–ú–ò–†–û–í–ê–ù–ò–ï–ú –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            all_ingredients = []
            
            for day in plan.get('days', []):
                for meal in day.get('meals', []):
                    ingredients = meal.get('ingredients', '')
                    lines = ingredients.split('\n')
                    for line in lines:
                        line = line.strip()
                        if line and (line.startswith('‚Ä¢') or line.startswith('-') or line[0].isdigit()):
                            clean_line = re.sub(r'^[‚Ä¢\-\d\.\s]+', '', line).strip()
                            if clean_line:
                                all_ingredients.append(clean_line)
            
            # –°—É–º–º–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            ingredient_totals = {}
            for ingredient in all_ingredients:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                match = re.match(r'(.+?)\s*-\s*(\d+\.?\d*)\s*([–≥–∫–≥–º–ª–ª]?)', ingredient)
                if match:
                    name = match.group(1).strip()
                    amount = float(match.group(2))
                    unit = match.group(3) if match.group(3) else '–≥'
                    
                    key = f"{name} ({unit})"
                    if key in ingredient_totals:
                        ingredient_totals[key] += amount
                    else:
                        ingredient_totals[key] = amount
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    if ingredient in ingredient_totals:
                        ingredient_totals[ingredient] += 1
                    else:
                        ingredient_totals[ingredient] = 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_ingredients = []
            for ingredient, total in ingredient_totals.items():
                if total == int(total):
                    total = int(total)
                formatted_ingredients.append(f"{ingredient.split(' (')[0]} - {total}{ingredient.split('(')[-1].rstrip(')') if '(' in ingredient else '—à—Ç'}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            formatted_ingredients.sort()
            
            if not formatted_ingredients:
                # –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                return [
                    "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥",
                    "–†—ã–±–∞ –±–µ–ª–∞—è - 600–≥", 
                    "–û–≤–æ—â–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ - 2000–≥",
                    "–§—Ä—É–∫—Ç—ã - 1500–≥",
                    "–ö—Ä—É–ø—ã - 1000–≥",
                    "–Ø–π—Ü–∞ - 10—à—Ç",
                    "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - 1000–≥",
                    "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 200–º–ª",
                    "–°–ø–µ—Ü–∏–∏ - –ø–æ –≤–∫—É—Å—É"
                ]
            
            return formatted_ingredients[:25]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            
        except Exception as e:
            logger.error(f"Error generating shopping list: {e}")
            return [
                "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥",
                "–†—ã–±–∞ –±–µ–ª–∞—è - 600–≥",
                "–û–≤–æ—â–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ - 2000–≥",
                "–§—Ä—É–∫—Ç—ã - 1500–≥",
                "–ö—Ä—É–ø—ã - 1000–≥"
            ]
    
    async def send_plan_as_file(self, update, context, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞"""
        try:
            plan = get_latest_plan(user_id)
            if not plan:
                if hasattr(update, 'message'):
                    await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è")
                else:
                    await update.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è")
                return
            
            filename = f"nutrition_plan_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("üçé –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø\n")
                f.write("=" * 50 + "\n\n")
                
                user_data = plan.get('user_data', {})
                f.write("üë§ –í–ê–®–ò –î–ê–ù–ù–´–ï:\n")
                f.write(f"   –ü–æ–ª: {user_data.get('gender', '')}\n")
                f.write(f"   –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '')} –ª–µ—Ç\n")
                f.write(f"   –†–æ—Å—Ç: {user_data.get('height', '')} —Å–º\n")
                f.write(f"   –í–µ—Å: {user_data.get('weight', '')} –∫–≥\n")
                f.write(f"   –¶–µ–ª—å: {user_data.get('goal', '')}\n")
                f.write(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity', '')}\n\n")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ
                if 'water_recommendation' in plan:
                    water = plan['water_recommendation']
                    f.write("üíß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–û–î–ï:\n")
                    f.write(f"   –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {water.get('daily_recommendation', '2000 –º–ª')}\n")
                    f.write(f"   {water.get('description', '')}\n\n")
                    f.write("   –°–æ–≤–µ—Ç—ã:\n")
                    for tip in water.get('tips', []):
                        f.write(f"   {tip}\n")
                    f.write("\n")
                
                # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
                f.write("üõí –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö –ù–ê –ù–ï–î–ï–õ–Æ:\n")
                f.write("-" * 40 + "\n")
                shopping_list = self._generate_shopping_list(plan)
                for i, item in enumerate(shopping_list, 1):
                    f.write(f"{i}. {item}\n")
                f.write("\n")
                
                # –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
                f.write("üìÖ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ:\n")
                f.write("=" * 50 + "\n\n")
                
                for day in plan.get('days', []):
                    f.write(f"=== {day['name']} ===\n")
                    f.write(f"üî• –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {day.get('total_calories', '~1800-2000 –∫–∫–∞–ª')}\n\n")
                    
                    for meal in day.get('meals', []):
                        f.write(f"{meal['emoji']} {meal['type']} ({meal['time']})\n")
                        f.write(f"   –ë–ª—é–¥–æ: {meal['name']}\n")
                        f.write(f"   –ö–∞–ª–æ—Ä–∏–∏: {meal['calories']}\n")
                        f.write(f"   –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal['cooking_time']}\n")
                        f.write("   –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n")
                        ingredients_lines = meal['ingredients'].split('\n')
                        for line in ingredients_lines:
                            f.write(f"     {line}\n")
                        f.write("   –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n")
                        instructions_lines = meal['instructions'].split('\n')
                        for line in instructions_lines:
                            f.write(f"     {line}\n")
                        f.write("-" * 40 + "\n\n")
                
                f.write("\nüí° –°–û–í–ï–¢–´:\n")
                f.write("‚Ä¢ –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã\n")
                f.write("‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è\n")
                f.write("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n")
                
                f.write(f"üìÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
            
            with open(filename, 'rb') as file:
                if hasattr(update, 'message'):
                    await update.message.reply_document(
                        document=file,
                        filename=f"–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_{user_id}.txt",
                        caption="üìÑ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫"
                    )
                else:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=file,
                        filename=f"–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_{user_id}.txt",
                        caption="üìÑ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫"
                    )
            
            import os
            os.remove(filename)
            
            if not hasattr(update, 'message'):
                await update.edit_message_text("‚úÖ –ü–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞!")
                
        except Exception as e:
            logger.error(f"Error sending plan as file: {e}")
            if hasattr(update, 'message'):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–ª–∞–Ω–∞")
            else:
                await update.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–ª–∞–Ω–∞")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        health_monitor.increment_error()
        
        # –ò–ì–ù–û–†–ò–†–£–ï–ú –ö–û–ù–§–õ–ò–ö–¢–ù–´–ï –û–®–ò–ë–ö–ò WEBHOOK
        if (isinstance(context.error, Conflict) and 
            "webhook is active" in str(context.error)):
            logger.warning("‚ö†Ô∏è Webhook conflict error (ignored)")
            return
            
        logger.error(f"Exception while handling an update: {context.error}")
        
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================

async def run_health_checks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    logger.info("üîç Running initial health checks...")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    db_healthy = await check_database_health()
    telegram_healthy = await check_telegram_api_health()
    yandex_healthy = await check_yandex_gpt_health()
    
    if db_healthy and telegram_healthy:
        logger.info("‚úÖ All health checks passed")
        return True
    else:
        logger.error("‚ùå Some health checks failed")
        return False

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ webhook"""
    global bot_application
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        if not await run_health_checks():
            logger.error("‚ùå Health checks failed, cannot start bot")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = NutritionBot()
        bot_application = bot.application
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook (–û–î–ò–ù —Ä–∞–∑!)
        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        
        await bot_application.initialize()
        await bot_application.start()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await bot_application.bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            max_connections=40
        )
        
        logger.info(f"‚úÖ Webhook configured: {webhook_url}")
        health_monitor.update_bot_status("running")
        
        return True
        
    except Exception as e:
        health_monitor.update_bot_status("error")
        logger.error(f"‚ùå Bot setup failed: {e}")
        return False

def start_app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        success = asyncio.run(setup_bot())
        if success:
            port = int(os.environ.get('PORT', 8080))
            logger.info(f"üöÄ Starting Flask app on port {port}")
            app.run(host='0.0.0.0', port=port, debug=False)
        else:
            logger.error("‚ùå Failed to start application")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üõë Application stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    start_app()
