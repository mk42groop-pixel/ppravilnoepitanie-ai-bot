import os
import logging
import threading
import time
import sqlite3
import json
import requests
import signal
import atexit
import socket
import sys
import re
from datetime import datetime, timedelta
from flask import Flask, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = 362423055

# Yandex GPT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('PRAGMA journal_mode=WAL')
    cursor.execute('PRAGMA synchronous=NORMAL')
    cursor.execute('PRAGMA cache_size=-64000')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS nutrition_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_checkins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            weight REAL,
            waist_circumference INTEGER,
            wellbeing_score INTEGER,
            sleep_quality INTEGER,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_limits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            last_plan_date TIMESTAMP,
            plan_count INTEGER DEFAULT 0,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_plans_user_id ON nutrition_plans(user_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_limits_user_id ON user_limits(user_id)')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['user_id'], user_data['username'], user_data['first_name'], user_data['last_name']))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving user: {e}")
    finally:
        conn.close()

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_USER_ID

def can_make_request(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return True
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return True
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_since_last_plan = (datetime.now() - last_plan_date).days
        
        can_request = days_since_last_plan >= 7
        conn.close()
        return can_request
        
    except Exception as e:
        logger.error(f"Error checking request limit: {e}")
        return True

def update_user_limit(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        current_time = datetime.now().isoformat()
        cursor.execute('''
            INSERT OR REPLACE INTO user_limits (user_id, last_plan_date, plan_count, updated_at)
            VALUES (?, ?, COALESCE((SELECT plan_count FROM user_limits WHERE user_id = ?), 0) + 1, ?)
        ''', (user_id, current_time, user_id, current_time))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error updating user limits: {e}")

def get_days_until_next_plan(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        if is_admin(user_id):
            return 0
            
        conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT last_plan_date FROM user_limits WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return 0
            
        last_plan_date = datetime.fromisoformat(result[0])
        days_passed = (datetime.now() - last_plan_date).days
        days_remaining = 7 - days_passed
        
        conn.close()
        return max(0, days_remaining)
        
    except Exception as e:
        logger.error(f"Error getting days until next plan: {e}")
        return 0

def save_plan(user_id, plan_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –ë–î"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO nutrition_plans (user_id, plan_data) VALUES (?, ?)', 
                      (user_id, json.dumps(plan_data)))
        plan_id = cursor.lastrowid
        conn.commit()
        return plan_id
    except Exception as e:
        logger.error(f"Error saving plan: {e}")
        return None
    finally:
        conn.close()

def save_checkin(user_id, weight, waist, wellbeing, sleep):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO daily_checkins (user_id, weight, waist_circumference, wellbeing_score, sleep_quality)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, weight, waist, wellbeing, sleep))
        conn.commit()
    except Exception as e:
        logger.error(f"Error saving checkin: {e}")
    finally:
        conn.close()

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('nutrition_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT date, weight, waist_circumference, wellbeing_score, sleep_quality
            FROM daily_checkins WHERE user_id = ? ORDER BY date DESC LIMIT 7
        ''', (user_id,))
        checkins = cursor.fetchall()
        return checkins
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return []
    finally:
        conn.close()

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ï–† GPT ====================

class GPTParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Yandex GPT"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def parse_plan_response(self, gpt_response, user_data):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç GPT –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            self.logger.info("üîç Starting GPT response parsing...")
            
            structured_plan = {
                'days': [],
                'shopping_list': self._extract_shopping_list(gpt_response),
                'general_recommendations': self._extract_general_recommendations(gpt_response),
                'water_regime': self._extract_water_regime(gpt_response),
                'user_data': user_data,
                'parsed_at': datetime.now().isoformat()
            }
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–∏
            days_texts = self._split_into_days(gpt_response)
            
            for i, day_text in enumerate(days_texts):
                if day_text.strip():
                    day_data = self._parse_day(day_text, i)
                    if day_data:
                        structured_plan['days'].append(day_data)
            
            # –ï—Å–ª–∏ –¥–Ω–µ–π –º–µ–Ω—å—à–µ 7, –¥–æ–ø–æ–ª–Ω—è–µ–º
            while len(structured_plan['days']) < 7:
                day_index = len(structured_plan['days'])
                structured_plan['days'].append(self._create_fallback_day(day_index))
            
            self.logger.info(f"‚úÖ Successfully parsed {len(structured_plan['days'])} days")
            return structured_plan
            
        except Exception as e:
            self.logger.error(f"‚ùå Error parsing GPT response: {e}")
            return self._create_fallback_plan(user_data)
    
    def _split_into_days(self, text):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        days_pattern = r'(?:–î–ï–ù–¨\s+\d+|–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö|–í–¢–û–†–ù–ò–ö|–°–†–ï–î–ê|–ß–ï–¢–í–ï–†–ì|–ü–Ø–¢–ù–ò–¶–ê|–°–£–ë–ë–û–¢–ê|–í–û–°–ö–†–ï–°–ï–ù–¨–ï).*?(?=(?:–î–ï–ù–¨\s+\d+|–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö|–í–¢–û–†–ù–ò–ö|–°–†–ï–î–ê|–ß–ï–¢–í–ï–†–ì|–ü–Ø–¢–ù–ò–¶–ê|–°–£–ë–ë–û–¢–ê|–í–û–°–ö–†–ï–°–ï–ù–¨–ï|$))'
        matches = re.findall(days_pattern, text, re.DOTALL | re.IGNORECASE)
        
        if matches:
            return matches
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏
            lines = text.split('\n')
            days = []
            current_day = []
            day_started = False
            
            for line in lines:
                if re.match(r'.*(–¥–µ–Ω—å|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).*', line.lower()):
                    if day_started and current_day:
                        days.append('\n'.join(current_day))
                        current_day = []
                    day_started = True
                
                if day_started:
                    current_day.append(line)
            
            if current_day:
                days.append('\n'.join(current_day))
            
            return days if days else [text]
    
    def _parse_day(self, day_text, day_index):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è"""
        day_names = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        day_name = day_names[day_index] if day_index < len(day_names) else f"–î–ï–ù–¨ {day_index + 1}"
        
        return {
            'name': day_name,
            'meals': self._extract_meals(day_text),
            'total_calories': self._calculate_day_calories(day_text)
        }
    
    def _extract_meals(self, day_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ –¥–µ–Ω—å"""
        meals = []
        meal_types = [
            ('–ó–ê–í–¢–†–ê–ö', 'üç≥'),
            ('–ü–ï–†–ï–ö–£–° 1', 'ü•ó'), 
            ('–û–ë–ï–î', 'üç≤'),
            ('–ü–ï–†–ï–ö–£–° 2', 'üçé'),
            ('–£–ñ–ò–ù', 'üçõ')
        ]
        
        for meal_type, emoji in meal_types:
            meal_data = self._extract_meal_data(day_text, meal_type, emoji)
            if meal_data:
                meals.append(meal_data)
        
        # –ï—Å–ª–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –º–µ–Ω—å—à–µ 5, –¥–æ–ø–æ–ª–Ω—è–µ–º
        while len(meals) < 5:
            meal_index = len(meals)
            meals.append(self._create_fallback_meal(meal_types[meal_index] if meal_index < len(meal_types) else ('–ü–†–ò–ï–ú –ü–ò–©–ò', 'üçΩÔ∏è')))
        
        return meals
    
    def _extract_meal_data(self, day_text, meal_type, emoji):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏
        meal_pattern = f'{meal_type}.*?(?=\\n\\s*(?:{"|".join([m[0] for m in [("–ó–ê–í–¢–†–ê–ö", ""), ("–û–ë–ï–î", ""), ("–£–ñ–ò–ù", ""), ("–ü–ï–†–ï–ö–£–°", "")]])}|–î–ï–ù–¨|$))'
        match = re.search(meal_pattern, day_text, re.DOTALL | re.IGNORECASE)
        
        if not match:
            return None
        
        meal_text = match.group(0)
        
        return {
            'type': meal_type,
            'emoji': emoji,
            'name': self._extract_meal_name(meal_text),
            'time': self._extract_meal_time(meal_text),
            'calories': self._extract_calories(meal_text),
            'ingredients': self._extract_ingredients(meal_text),
            'instructions': self._extract_instructions(meal_text),
            'cooking_time': self._extract_cooking_time(meal_text)
        }
    
    def _extract_meal_name(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"""
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        name_patterns = [
            r'\d{1,2}[:.]\d{2}[\s-]*(.*?)(?=\\n|$)',
            r'(?:–ó–∞–≤—Ç—Ä–∞–∫|–û–±–µ–¥|–£–∂–∏–Ω|–ü–µ—Ä–µ–∫—É—Å)[\s:]*(.*?)(?=\\n|$)',
        ]
        
        for pattern in name_patterns:
            match = re.search(pattern, meal_text, re.DOTALL | re.IGNORECASE)
            if match:
                name = match.group(1) if match.lastindex else match.group(0)
                cleaned_name = self._clean_text(name.strip())
                if cleaned_name and len(cleaned_name) > 2:
                    return cleaned_name
        
        return "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ"
    
    def _extract_meal_time(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        time_pattern = r'(\d{1,2}[:.]\d{2})'
        match = re.search(time_pattern, meal_text)
        if match:
            return match.group(1).replace('.', ':')
        
        # –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        time_map = {
            '–ó–ê–í–¢–†–ê–ö': '8:00',
            '–ü–ï–†–ï–ö–£–° 1': '11:00', 
            '–û–ë–ï–î': '13:00',
            '–ü–ï–†–ï–ö–£–° 2': '16:00',
            '–£–ñ–ò–ù': '19:00'
        }
        return time_map.get('–ó–ê–í–¢–†–ê–ö', '8:00')
    
    def _extract_calories(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"""
        calorie_patterns = [
            r'(\d+)\s*–∫–∫–∞–ª',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:\s*(\d+)',
        ]
        
        for pattern in calorie_patterns:
            match = re.search(pattern, meal_text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} –∫–∫–∞–ª"
        
        return "~350 –∫–∫–∞–ª"
    
    def _extract_ingredients(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        ingredients_section = self._find_section(meal_text, ['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '—Å–æ—Å—Ç–∞–≤', '–ø—Ä–æ–¥—É–∫—Ç—ã'])
        
        if ingredients_section:
            lines = ingredients_section.split('\n')
            ingredients = []
            for line in lines:
                line = line.strip()
                if line and not re.match(r'^(–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã|—Å–æ—Å—Ç–∞–≤|–ø—Ä–æ–¥—É–∫—Ç—ã)', line.lower()):
                    clean_line = re.sub(r'^[‚Ä¢\-*\d\.]\s*', '', line)
                    if clean_line and len(clean_line) > 3:
                        ingredients.append(f"‚Ä¢ {clean_line}")
            
            if ingredients:
                return '\n'.join(ingredients[:8])
        
        return "‚Ä¢ –°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Å–µ–∑–æ–Ω—É\n‚Ä¢ –°–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É"
    
    def _extract_instructions(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        instructions_section = self._find_section(meal_text, ['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '—Ä–µ—Ü–µ–ø—Ç', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'])
        
        if instructions_section:
            steps = self._split_into_steps(instructions_section)
            if steps:
                return '\n'.join([f"{i+1}. {step}" for i, step in enumerate(steps)])
        
        return "1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n2. –°–ª–µ–¥—É–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º"
    
    def _extract_cooking_time(self, meal_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        time_patterns = [
            r'–≤—Ä–µ–º—è[^\d]*(\d+)[^\d]*–º–∏–Ω—É—Ç',
            r'–≥–æ—Ç–æ–≤–∏—Ç—å[^\d]*(\d+)[^\d]*–º–∏–Ω',
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, meal_text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} –º–∏–Ω—É—Ç"
        
        return "15-20 –º–∏–Ω—É—Ç"
    
    def _find_section(self, text, keywords):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–µ–∫—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        for keyword in keywords:
            pattern = f'{keyword}.*?(?=\\n\\s*(?:{"|".join(keywords)}|$))'
            match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
            if match:
                return match.group(0)
        return None
    
    def _split_into_steps(self, text):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        text = re.sub(r'^(–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ|—Ä–µ—Ü–µ–ø—Ç|–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)[:\s]*', '', text, flags=re.IGNORECASE)
        
        # –ò—â–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏
        steps = re.findall(r'\d+[\.\)]\s*(.*?)(?=\d+[\.\)]|$)', text, re.DOTALL)
        if steps:
            return [self._clean_text(step) for step in steps if step.strip()]
        
        # –ò—â–µ–º —à–∞–≥–∏ —Å –±—É–ª–ª–µ—Ç–∞–º–∏
        steps = re.findall(r'[‚Ä¢\-]\s*(.*?)(?=\\n[‚Ä¢\-]|$)', text, re.DOTALL)
        if steps:
            return [self._clean_text(step) for step in steps if step.strip()]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        return lines[:5]
    
    def _extract_shopping_list(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
        shopping_section = self._find_section(text, ['—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '–ø–æ–∫—É–ø–∫–∏', '–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é'])
        
        if shopping_section:
            lines = shopping_section.split('\n')
            items = []
            for line in lines:
                line = line.strip()
                if line and not re.match(r'^(—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫|–ø–æ–∫—É–ø–∫–∏|–ø—Ä–æ–¥—É–∫—Ç—ã)', line.lower()):
                    clean_line = re.sub(r'^[‚Ä¢\-*\d\.]\s*', '', line)
                    if clean_line and len(clean_line) > 3:
                        items.append(clean_line)
            
            if items:
                unique_items = list(dict.fromkeys(items))
                return '\n'.join(unique_items[:20])
        
        return self._generate_default_shopping_list()
    
    def _extract_general_recommendations(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendations = []
        
        water_match = re.search(r'(–ø–∏—Ç—å.*?–≤–æ–¥[–∞-—è]*\s*\d+.*?–º–ª)', text, re.IGNORECASE)
        if water_match:
            recommendations.append(f"üíß {water_match.group(1)}")
        
        return '\n'.join(recommendations) if recommendations else "üí° –°–ª–µ–¥—É–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ –ø–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã"
    
    def _extract_water_regime(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º"""
        water_pattern = r'(?:–≤–æ–¥[–∞-—è]*\s*—Ä–µ–∂–∏–º|–ø–∏—Ç—å[–∞-—è]*\s*–≤–æ–¥[–∞-—è]*).*?(\d+.*?–º–ª)'
        match = re.search(water_pattern, text, re.IGNORECASE)
        return match.group(1) if match else "1.5-2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å"
    
    def _calculate_day_calories(self, day_text):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–Ω—è"""
        calorie_matches = re.findall(r'(\d+)\s*–∫–∫–∞–ª', day_text, re.IGNORECASE)
        if calorie_matches:
            total = sum(int(cal) for cal in calorie_matches[:10])
            return f"{total} –∫–∫–∞–ª"
        return "~1800 –∫–∫–∞–ª"
    
    def _clean_text(self, text):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        if not text:
            return ""
        text = re.sub(r'\s+', ' ', text)
        return text.strip()
    
    def _generate_default_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
        return """–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 700–≥
–§–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏ - 500–≥
–ë–µ–ª–∞—è —Ä—ã–±–∞ - 600–≥
–ì–æ–≤—è–¥–∏–Ω–∞ - 400–≥
–Ø–π—Ü–∞ - 10 —à—Ç
–¢–≤–æ—Ä–æ–≥ 5% - 500–≥
–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 400–≥
–ú–æ–ª–æ–∫–æ - 1 –ª
–°–º–µ—Ç–∞–Ω–∞ - 200–≥
–°—ã—Ä - 150–≥
–ü–æ–º–∏–¥–æ—Ä—ã - 500–≥
–û–≥—É—Ä—Ü—ã - 500–≥
–ö–∞–ø—É—Å—Ç–∞ - 500–≥
–ú–æ—Ä–∫–æ–≤—å - 300–≥
–õ—É–∫ - 300–≥
–ß–µ—Å–Ω–æ–∫ - 1 –≥–æ–ª–æ–≤–∫–∞
–ó–µ–ª–µ–Ω—å - 1 –ø—É—á–æ–∫
–Ø–±–ª–æ–∫–∏ - 500–≥
–ë–∞–Ω–∞–Ω—ã - 500–≥
–ê–ø–µ–ª—å—Å–∏–Ω—ã - 300–≥
–ì—Ä–µ—á–∫–∞ - 300–≥
–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 300–≥
–†–∏—Å - 300–≥
–•–ª–µ–± —Ä–∂–∞–Ω–æ–π - 1 –±—É—Ö–∞–Ω–∫–∞
–ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 150–º–ª"""
    
    def _create_fallback_plan(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω"""
        self.logger.warning("üîÑ Using fallback plan")
        fallback_plan = {
            'days': [self._create_fallback_day(i) for i in range(7)],
            'shopping_list': self._generate_default_shopping_list(),
            'general_recommendations': "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã",
            'water_regime': "1.5-2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å",
            'user_data': user_data,
            'parsed_at': datetime.now().isoformat()
        }
        return fallback_plan
    
    def _create_fallback_day(self, day_index):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –¥–µ–Ω—å"""
        day_names = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        day_name = day_names[day_index] if day_index < len(day_names) else f"–î–ï–ù–¨ {day_index + 1}"
        
        return {
            'name': day_name,
            'meals': [self._create_fallback_meal(meal_type) for meal_type in [
                ('–ó–ê–í–¢–†–ê–ö', 'üç≥'), ('–ü–ï–†–ï–ö–£–° 1', 'ü•ó'), ('–û–ë–ï–î', 'üç≤'), 
                ('–ü–ï–†–ï–ö–£–° 2', 'üçé'), ('–£–ñ–ò–ù', 'üçõ')
            ]],
            'total_calories': '~1800 –∫–∫–∞–ª'
        }
    
    def _create_fallback_meal(self, meal_type):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏"""
        meal_type_name, emoji = meal_type
        
        # –†–∞–∑–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        meals_map = {
            '–ó–ê–í–¢–†–ê–ö': {
                'name': '–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                'ingredients': '‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 60–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 150–º–ª\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.',
                'instructions': '1. –í–∞—Ä–∏—Ç–µ –æ–≤—Å—è–Ω–∫—É 10 –º–∏–Ω—É—Ç\n2. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ –º–µ–¥\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Ç–µ–ø–ª—ã–º'
            },
            '–ü–ï–†–ï–ö–£–° 1': {
                'name': '–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏',
                'ingredients': '‚Ä¢ –ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 150–≥\n‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30–≥\n‚Ä¢ –Ø–≥–æ–¥—ã - 50–≥',
                'instructions': '1. –°–º–µ—à–∞–π—Ç–µ –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏\n2. –î–æ–±–∞–≤—å—Ç–µ —è–≥–æ–¥—ã\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º'
            },
            '–û–ë–ï–î': {
                'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π',
                'ingredients': '‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ì—Ä–µ—á–∫–∞ - 80–≥\n‚Ä¢ –û–≥—É—Ä—Ü—ã - 100–≥\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 100–≥',
                'instructions': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏'
            },
            '–ü–ï–†–ï–ö–£–° 2': {
                'name': '–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç',
                'ingredients': '‚Ä¢ –Ø–±–ª–æ–∫–æ - 1 —à—Ç\n‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç\n‚Ä¢ –ê–ø–µ–ª—å—Å–∏–Ω - 1 —à—Ç\n‚Ä¢ –ô–æ–≥—É—Ä—Ç - 50–≥',
                'instructions': '1. –ù–∞—Ä–µ–∂—å—Ç–µ —Ñ—Ä—É–∫—Ç—ã\n2. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –π–æ–≥—É—Ä—Ç–æ–º\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º'
            },
            '–£–ñ–ò–ù': {
                'name': '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏',
                'ingredients': '‚Ä¢ –ë–µ–ª–∞—è —Ä—ã–±–∞ - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 150–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 100–≥\n‚Ä¢ –õ—É–∫ - 50–≥',
                'instructions': '1. –ó–∞–ø–µ–∫–∏—Ç–µ —Ä—ã–±—É —Å –æ–≤–æ—â–∞–º–∏\n2. –ü—Ä–∏–ø—Ä–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—è–º–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ä—è—á–∏–º'
            }
        }
        
        meal_data = meals_map.get(meal_type_name, {
            'name': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ',
            'ingredients': '‚Ä¢ –°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n‚Ä¢ –°–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É',
            'instructions': '1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ —Ä–µ—Ü–µ–ø—Ç—É\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º'
        })
        
        return {
            'type': meal_type_name,
            'emoji': emoji,
            'name': meal_data['name'],
            'time': self._get_default_meal_time(meal_type_name),
            'calories': '350-450 –∫–∫–∞–ª',
            'ingredients': meal_data['ingredients'],
            'instructions': meal_data['instructions'],
            'cooking_time': '15-25 –º–∏–Ω—É—Ç'
        }
    
    def _get_default_meal_time(self, meal_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        time_map = {
            '–ó–ê–í–¢–†–ê–ö': '8:00',
            '–ü–ï–†–ï–ö–£–° 1': '11:00',
            '–û–ë–ï–î': '13:00',
            '–ü–ï–†–ï–ö–£–° 2': '16:00',
            '–£–ñ–ò–ù': '19:00'
        }
        return time_map.get(meal_type, '12:00')

# ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ ====================

class InteractiveMenu:
    def __init__(self):
        self.days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        self.meals = ['–ó–ê–í–¢–†–ê–ö', '–ü–ï–†–ï–ö–£–° 1', '–û–ë–ï–î', '–ü–ï–†–ï–ö–£–° 2', '–£–ñ–ò–ù']
    
    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù", callback_data="create_plan")],
            [InlineKeyboardButton("üìà –ß–ï–ö-–ò–ù", callback_data="checkin")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
            [InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_data_input(self, step=1):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
        if step == 1:  # –í—ã–±–æ—Ä –ø–æ–ª–∞
            keyboard = [
                [InlineKeyboardButton("üë® –ú–£–ñ–ß–ò–ù–ê", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–ï–ù–©–ò–ù–ê", callback_data="gender_female")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        elif step == 2:  # –í—ã–±–æ—Ä —Ü–µ–ª–∏
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–û–•–£–î–ï–ù–ò–ï", callback_data="goal_weight_loss")],
                [InlineKeyboardButton("üí™ –ù–ê–ë–û–† –ú–ê–°–°–´", callback_data="goal_mass")],
                [InlineKeyboardButton("‚öñÔ∏è –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï", callback_data="goal_maintain")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_gender")]
            ]
        elif step == 3:  # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í–´–°–û–ö–ê–Ø", callback_data="activity_high")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–†–ï–î–ù–Ø–Ø", callback_data="activity_medium")],
                [InlineKeyboardButton("üí§ –ù–ò–ó–ö–ê–Ø", callback_data="activity_low")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_goal")]
            ]
        
        return InlineKeyboardMarkup(keyboard)

# ==================== FLASK APP ====================

app = Flask(__name__)

@app.route('/')
def home():
    return """
    <h1>ü§ñ Nutrition Bot is Running!</h1>
    <p>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
    <p><a href="/health">Health Check</a></p>
    <p>üïí Last update: {}</p>
    """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

@app.route('/health')
def health_check():
    return jsonify({
        "status": "healthy", 
        "service": "nutrition-bot",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0"
    })

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================

class NutritionBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN not found")
            raise ValueError("BOT_TOKEN is required")
            
        init_database()
        
        try:
            self.application = Application.builder().token(self.bot_token).build()
            self.menu = InteractiveMenu()
            self.parser = GPTParser()
            self._setup_handlers()
            
            logger.info("‚úÖ Bot initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }
            save_user(user_data)
            
            welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Å AI!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
            if is_admin(user.id):
                welcome_text += "\nüëë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∞–º!"
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        logger.info(f"üì® Callback received: {data}")
        
        try:
            # –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
            if data == "create_plan":
                await self._handle_create_plan(query, context)
            elif data == "checkin":
                await self._handle_checkin(query, context)
            elif data == "stats":
                await self._handle_stats(query, context)
            elif data == "help":
                await self._handle_help(query, context)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
            elif data == "back_main":
                await self._show_main_menu(query)
            elif data == "back_gender":
                await self._handle_create_plan(query, context)
            elif data == "back_goal":
                await self._handle_gender_back(query, context)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
            elif data.startswith("gender_"):
                await self._handle_gender(query, context, data)
            elif data.startswith("goal_"):
                await self._handle_goal(query, context, data)
            elif data.startswith("activity_"):
                await self._handle_activity(query, context, data)
            else:
                logger.warning(f"‚ö†Ô∏è Unknown callback data: {data}")
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=self.menu.get_main_menu())
                
        except Exception as e:
            logger.error(f"‚ùå Error in callback handler: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_create_plan(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not is_admin(user_id) and not can_make_request(user_id):
                days_remaining = get_days_until_next_plan(user_id)
                await query.edit_message_text(
                    f"‚è≥ –í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n–°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
            context.user_data['plan_data'] = {}
            context.user_data['plan_step'] = 1
            
            logger.info(f"üîß Starting plan creation for user {user_id}")
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in create plan handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender_back(self, query, context):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
            if 'plan_data' in context.user_data:
                # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'gender' in context.user_data['plan_data']:
                    del context.user_data['plan_data']['gender']
            
            context.user_data['plan_step'] = 1
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=self.menu.get_plan_data_input(step=1)
            )
        except Exception as e:
            logger.error(f"‚ùå Error in gender back handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_gender(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        try:
            gender_map = {
                "gender_male": "–ú–£–ñ–ß–ò–ù–ê",
                "gender_female": "–ñ–ï–ù–©–ò–ù–ê"
            }
            
            context.user_data['plan_data']['gender'] = gender_map[data]
            context.user_data['plan_step'] = 2
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=self.menu.get_plan_data_input(step=2)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in gender handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_goal(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
        try:
            goal_map = {
                "goal_weight_loss": "–ü–û–•–£–î–ï–ù–ò–ï",
                "goal_mass": "–ù–ê–ë–û–† –ú–ê–°–°–´", 
                "goal_maintain": "–ü–û–î–î–ï–†–ñ–ê–ù–ò–ï"
            }
            
            context.user_data['plan_data']['goal'] = goal_map[data]
            context.user_data['plan_step'] = 3
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=self.menu.get_plan_data_input(step=3)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in goal handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_activity(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            activity_map = {
                "activity_high": "–í–´–°–û–ö–ê–Ø",
                "activity_medium": "–°–†–ï–î–ù–Ø–Ø",
                "activity_low": "–ù–ò–ó–ö–ê–Ø"
            }
            
            context.user_data['plan_data']['activity'] = activity_map[data]
            context.user_data['awaiting_input'] = 'plan_details'
            
            await query.edit_message_text(
                "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 30, 180, 75"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error in activity handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_checkin(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫-–∏–Ω–∞"""
        try:
            await query.edit_message_text(
                "üìà –§—É–Ω–∫—Ü–∏—è —á–µ–∫-–∏–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
                reply_markup=self.menu.get_main_menu()
            )
        except Exception as e:
            logger.error(f"Error in checkin handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–µ–∫-–∏–Ω–∞",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = query.from_user.id
            stats = get_user_stats(user_id)
            
            if not stats:
                await query.edit_message_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                    reply_markup=self.menu.get_main_menu()
                )
                return
            
            stats_text = "üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):\n\n"
            for stat in stats:
                date, weight, waist, wellbeing, sleep = stat
                stats_text += f"üìÖ {date[:10]}: –í–µ—Å {weight}–∫–≥, –¢–∞–ª–∏—è {waist}—Å–º\n"
                stats_text += f"   –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {wellbeing}/5, –°–æ–Ω: {sleep}/5\n\n"
            
            await query.edit_message_text(
                stats_text,
                reply_markup=self.menu.get_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in stats handler: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _handle_help(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        help_text = """
‚ùì –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£

üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù:
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à –ø–æ–ª, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π (–∞–¥–º–∏–Ω–∞–º - –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ)

üìà –ß–ï–ö-–ò–ù:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ó–∞–ø–∏—Å—å –≤–µ—Å–∞, –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ —á–µ–∫-–∏–Ω
"""
        await query.edit_message_text(
            help_text,
            reply_markup=self.menu.get_main_menu()
        )
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.menu.get_main_menu()
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            user_id = update.effective_user.id
            
            if context.user_data.get('awaiting_input') == 'plan_details':
                await self._process_plan_details(update, context, text)
            else:
                await update.message.reply_text(
                    "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                    reply_markup=self.menu.get_main_menu()
                )
                
        except Exception as e:
            logger.error(f"Error in message handler: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _process_plan_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞"""
        try:
            parts = [part.strip() for part in text.split(',')]
            if len(parts) != 3:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            
            age, height, weight = int(parts[0]), int(parts[1]), float(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not (10 <= age <= 100):
                raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç")
            if not (100 <= height <= 250):
                raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")
            if not (30 <= weight <= 300):
                raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
            
            user_data = {
                **context.user_data['plan_data'],
                'age': age,
                'height': height,
                'weight': weight,
                'user_id': update.effective_user.id,
                'username': update.effective_user.username
            }
            
            logger.info(f"üéØ Generating plan for: {user_data}")
            
            processing_msg = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à AI-–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan_data = await self._generate_plan_with_gpt(user_data)
            if plan_data:
                plan_id = save_plan(user_data['user_id'], plan_data)
                update_user_limit(user_data['user_id'])
                
                await processing_msg.delete()
                
                success_text = f"""
üéâ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ì–û–¢–û–í!

üë§ –î–∞–Ω–Ω—ã–µ: {user_data['gender']}, {age} –ª–µ—Ç, {height} —Å–º, {weight} –∫–≥
üéØ –¶–µ–ª—å: {user_data['goal']}
üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['activity']}

üìã –ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ 7 –¥–Ω–µ–π –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å  
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ

–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!
"""
                await update.message.reply_text(
                    success_text,
                    reply_markup=self.menu.get_main_menu()
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                logger.info(f"‚úÖ Plan successfully created for user {user_data['user_id']}")
                
            else:
                await processing_msg.delete()
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            context.user_data['awaiting_input'] = None
            context.user_data['plan_data'] = {}
            context.user_data['plan_step'] = None
            
        except ValueError as e:
            error_msg = str(e)
            if "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞" in error_msg:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç, –í–µ—Å\n–ü—Ä–∏–º–µ—Ä: 30, 180, 80"
                )
            else:
                await update.message.reply_text(f"‚ùå {error_msg}")
        except Exception as e:
            logger.error(f"‚ùå Error processing plan details: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.menu.get_main_menu()
            )
    
    async def _generate_plan_with_gpt(self, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Yandex GPT"""
        try:
            prompt = self._create_prompt(user_data)
            
            headers = {
                "Authorization": f"Api-Key {YANDEX_API_KEY}",
                "Content-Type": "application/json"
            }
            
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": 4000
                },
                "messages": [
                    {
                        "role": "system",
                        "text": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π."
                    },
                    {
                        "role": "user", 
                        "text": prompt
                    }
                ]
            }
            
            logger.info("üöÄ Sending request to Yandex GPT...")
            response = requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=60)
            
            if response.status_code == 200:
                result = response.json()
                gpt_response = result['result']['alternatives'][0]['message']['text']
                logger.info("‚úÖ GPT response received successfully")
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                structured_plan = self.parser.parse_plan_response(gpt_response, user_data)
                return structured_plan
            else:
                logger.error(f"‚ùå GPT API error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error generating plan with GPT: {e}")
            return None
    
    def _create_prompt(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        gender = user_data['gender']
        goal = user_data['goal']
        activity = user_data['activity']
        age = user_data['age']
        height = user_data['height']
        weight = user_data['weight']
        
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è:

–ü–æ–ª: {gender}
–¶–µ–ª—å: {goal}
–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}
–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
–†–æ—Å—Ç: {height} —Å–º
–í–µ—Å: {weight} –∫–≥

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–ª–∞–Ω—É:
1. 7 –¥–Ω–µ–π (–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö - –í–û–°–ö–†–ï–°–ï–ù–¨–ï)
2. 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å: –ó–ê–í–¢–†–ê–ö, –ü–ï–†–ï–ö–£–° 1, –û–ë–ï–î, –ü–ï–†–ï–ö–£–° 2, –£–ñ–ò–ù
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
   - –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8:00)
   - –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
   - –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –∫–∫–∞–ª
   - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
   - –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
   - –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

4. –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
   - –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É
   - –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–ª—å ({goal}).
–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —á–µ—Ç–∫–æ –ø–æ –¥–Ω—è–º –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏.
"""
        return prompt
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå Exception while handling update: {context.error}")
        
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.menu.get_main_menu()
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        bot = NutritionBot()
        
        # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_flask():
            port = int(os.environ.get('PORT', 5000))
            app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info(f"üöÄ Flask server started on port {os.environ.get('PORT', 5000)}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ Starting bot polling...")
        bot.application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    run_bot()
